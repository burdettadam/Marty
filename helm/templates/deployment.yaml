apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "marty-service.fullname" . }}
  labels:
    {{- include "marty-service.labels" . | nindent 4 }}
  {{- if .Values.serviceMesh.enabled }}
  annotations:
    {{- if eq .Values.serviceMesh.type "istio" }}
    sidecar.istio.io/inject: "{{ .Values.serviceMesh.istio.injection }}"
    {{- else if eq .Values.serviceMesh.type "linkerd" }}
    linkerd.io/inject: "{{ .Values.serviceMesh.linkerd.injection }}"
    {{- end }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "marty-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.serviceMesh.enabled }}
        {{- if eq .Values.serviceMesh.type "istio" }}
        sidecar.istio.io/inject: "{{ .Values.serviceMesh.istio.injection }}"
        {{- else if eq .Values.serviceMesh.type "linkerd" }}
        linkerd.io/inject: "{{ .Values.serviceMesh.linkerd.injection }}"
        {{- end }}
        {{- end }}
      labels:
        {{- include "marty-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "marty-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.http.targetPort }}
              protocol: TCP
            - name: grpc
              containerPort: {{ .Values.service.grpc.targetPort }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.service.metrics.targetPort }}
              protocol: TCP
          env:
            # General service environment
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}

            # Database configuration
            - name: DATABASE_DSN
              value: {{ .Values.database.dsn | quote }}
            - name: DATABASE_HOST
              value: {{ .Values.database.host | quote }}
            - name: DATABASE_PORT
              value: {{ .Values.database.port | quote }}
            - name: DATABASE_NAME
              value: {{ .Values.database.name | quote }}
            - name: DATABASE_USER
              value: {{ .Values.database.user | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.passwordSecret.name }}
                  key: {{ .Values.database.passwordSecret.key }}
            - name: DATABASE_POOL_MIN_SIZE
              value: {{ .Values.database.pool.min_size | quote }}
            - name: DATABASE_POOL_MAX_SIZE
              value: {{ .Values.database.pool.max_size | quote }}
            - name: DATABASE_POOL_MAX_OVERFLOW
              value: {{ .Values.database.pool.max_overflow | quote }}

            # gRPC TLS Configuration
            - name: GRPC_TLS_ENABLED
              value: {{ .Values.grpc.tls.enabled | quote }}
            - name: GRPC_TLS_MTLS
              value: {{ .Values.grpc.tls.mtls | quote }}
            - name: GRPC_TLS_REQUIRE_CLIENT_AUTH
              value: {{ .Values.grpc.tls.require_client_auth | quote }}
            {{- if .Values.grpc.tls.enabled }}
            - name: GRPC_TLS_SERVER_CERT
              value: {{ .Values.grpc.tls.server_cert | quote }}
            - name: GRPC_TLS_SERVER_KEY
              value: {{ .Values.grpc.tls.server_key | quote }}
            - name: GRPC_TLS_CLIENT_CA
              value: {{ .Values.grpc.tls.client_ca | quote }}
            - name: GRPC_TLS_CLIENT_CERT
              value: {{ .Values.grpc.tls.client_cert | quote }}
            - name: GRPC_TLS_CLIENT_KEY
              value: {{ .Values.grpc.tls.client_key | quote }}
            {{- end }}

            # Object Storage configuration
            {{- if .Values.objectStorage.enabled }}
            - name: OBJECT_STORAGE_ENDPOINT
              value: {{ .Values.objectStorage.endpoint | quote }}
            - name: OBJECT_STORAGE_BUCKET
              value: {{ .Values.objectStorage.bucket | quote }}
            - name: OBJECT_STORAGE_REGION
              value: {{ .Values.objectStorage.region | quote }}
            - name: OBJECT_STORAGE_USE_SSL
              value: {{ .Values.objectStorage.use_ssl | quote }}
            - name: OBJECT_STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.objectStorage.credentialsSecret.name }}
                  key: {{ .Values.objectStorage.credentialsSecret.access_key_key }}
            - name: OBJECT_STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.objectStorage.credentialsSecret.name }}
                  key: {{ .Values.objectStorage.credentialsSecret.secret_key_key }}
            {{- end }}

            # Key Vault configuration
            {{- if .Values.keyVault.enabled }}
            - name: KEY_VAULT_TYPE
              value: {{ .Values.keyVault.type | quote }}
            {{- if eq .Values.keyVault.type "hashicorp" }}
            - name: VAULT_ENDPOINT
              value: {{ .Values.keyVault.hashicorp.endpoint | quote }}
            - name: VAULT_AUTH_METHOD
              value: {{ .Values.keyVault.hashicorp.auth_method | quote }}
            - name: VAULT_ROLE
              value: {{ .Values.keyVault.hashicorp.role | quote }}
            - name: VAULT_MOUNT_PATH
              value: {{ .Values.keyVault.hashicorp.mount_path | quote }}
            - name: VAULT_SECRETS_PATH
              value: {{ .Values.keyVault.hashicorp.secrets_path | quote }}
            {{- else if eq .Values.keyVault.type "azure" }}
            - name: AZURE_VAULT_URL
              value: {{ .Values.keyVault.azure.vault_url | quote }}
            - name: AZURE_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keyVault.azure.credentialsSecret.name }}
                  key: {{ .Values.keyVault.azure.credentialsSecret.tenant_id_key }}
            - name: AZURE_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keyVault.azure.credentialsSecret.name }}
                  key: {{ .Values.keyVault.azure.credentialsSecret.client_id_key }}
            - name: AZURE_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.keyVault.azure.credentialsSecret.name }}
                  key: {{ .Values.keyVault.azure.credentialsSecret.client_secret_key }}
            {{- end }}
            {{- end }}

            # Event Bus configuration
            - name: EVENT_BUS_TYPE
              value: {{ .Values.eventBus.type | quote }}
            {{- if eq .Values.eventBus.type "kafka" }}
            - name: KAFKA_BROKERS
              value: {{ .Values.eventBus.kafka.brokers | quote }}
            - name: KAFKA_TOPIC_PREFIX
              value: {{ .Values.eventBus.kafka.topic_prefix | quote }}
            - name: KAFKA_CONSUMER_GROUP
              value: {{ .Values.eventBus.kafka.consumer_group | quote }}
            {{- if .Values.eventBus.kafka.security.enabled }}
            - name: KAFKA_SECURITY_ENABLED
              value: {{ .Values.eventBus.kafka.security.enabled | quote }}
            - name: KAFKA_SECURITY_PROTOCOL
              value: {{ .Values.eventBus.kafka.security.protocol | quote }}
            - name: KAFKA_SASL_MECHANISM
              value: {{ .Values.eventBus.kafka.security.sasl_mechanism | quote }}
            - name: KAFKA_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.eventBus.kafka.security.credentialsSecret.name }}
                  key: {{ .Values.eventBus.kafka.security.credentialsSecret.username_key }}
            - name: KAFKA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.eventBus.kafka.security.credentialsSecret.name }}
                  key: {{ .Values.eventBus.kafka.security.credentialsSecret.password_key }}
            {{- end }}
            {{- else if eq .Values.eventBus.type "nats" }}
            - name: NATS_SERVERS
              value: {{ .Values.eventBus.nats.servers | quote }}
            - name: NATS_SUBJECT_PREFIX
              value: {{ .Values.eventBus.nats.subject_prefix | quote }}
            {{- if .Values.eventBus.nats.security.enabled }}
            - name: NATS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.eventBus.nats.security.credentialsSecret.name }}
                  key: {{ .Values.eventBus.nats.security.credentialsSecret.username_key }}
            - name: NATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.eventBus.nats.security.credentialsSecret.name }}
                  key: {{ .Values.eventBus.nats.security.credentialsSecret.password_key }}
            {{- end }}
            {{- else if eq .Values.eventBus.type "rabbitmq" }}
            - name: RABBITMQ_HOST
              value: {{ .Values.eventBus.rabbitmq.host | quote }}
            - name: RABBITMQ_PORT
              value: {{ .Values.eventBus.rabbitmq.port | quote }}
            - name: RABBITMQ_VHOST
              value: {{ .Values.eventBus.rabbitmq.vhost | quote }}
            - name: RABBITMQ_EXCHANGE_PREFIX
              value: {{ .Values.eventBus.rabbitmq.exchange_prefix | quote }}
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.eventBus.rabbitmq.credentialsSecret.name }}
                  key: {{ .Values.eventBus.rabbitmq.credentialsSecret.username_key }}
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.eventBus.rabbitmq.credentialsSecret.name }}
                  key: {{ .Values.eventBus.rabbitmq.credentialsSecret.password_key }}
            {{- end }}

            # Service mesh configuration - disable internal TLS when mesh mTLS is enabled
            {{- if and .Values.serviceMesh.enabled .Values.grpc.tls.enabled }}
            - name: SERVICE_MESH_MTLS_ENABLED
              value: "true"
            - name: INTERNAL_TLS_DISABLED
              value: "true"
            {{- end }}

          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /health/live
              port: metrics
            initialDelaySeconds: 30
            periodSeconds: 10
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /health/ready
              port: metrics
            initialDelaySeconds: 5
            periodSeconds: 5
          {{- end }}

          # Volume mounts
          volumeMounts:
          {{- if .Values.grpc.tls.enabled }}
          - name: tls-server
            mountPath: /etc/tls/server
            readOnly: true
          - name: tls-client
            mountPath: /etc/tls/client
            readOnly: true
          - name: tls-ca
            mountPath: /etc/tls/ca
            readOnly: true
          {{- end }}
          {{- if .Values.persistence.enabled }}
          - name: data
            mountPath: /app/data
          {{- end }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}

      # Volumes
      volumes:
      {{- if .Values.grpc.tls.enabled }}
      - name: tls-server
        secret:
          secretName: {{ .Values.grpc.tls.secrets.server.name }}
          items:
          - key: {{ .Values.grpc.tls.secrets.server.cert_key }}
            path: tls.crt
          - key: {{ .Values.grpc.tls.secrets.server.key_key }}
            path: tls.key
      - name: tls-client
        secret:
          secretName: {{ .Values.grpc.tls.secrets.client.name }}
          items:
          - key: {{ .Values.grpc.tls.secrets.client.cert_key }}
            path: tls.crt
          - key: {{ .Values.grpc.tls.secrets.client.key_key }}
            path: tls.key
      - name: tls-ca
        secret:
          secretName: {{ .Values.grpc.tls.secrets.ca.name }}
          items:
          - key: {{ .Values.grpc.tls.secrets.ca.cert_key }}
            path: ca.crt
      {{- end }}
      {{- if .Values.persistence.enabled }}
      - name: data
        persistentVolumeClaim:
          claimName: {{ include "marty-service.fullname" . }}-data
      {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
