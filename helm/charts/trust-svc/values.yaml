# Default values for trust-svc
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: marty/trust-svc
  tag: "latest"
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: "trust-svc"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8081"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

service:
  type: ClusterIP
  http:
    port: 8080
    targetPort: 8080
  grpc:
    port: 9090
    targetPort: 9090
  metrics:
    port: 8081
    targetPort: 8081

# Environment configuration
env:
  # General service environment
  LOG_LEVEL: "INFO"
  SERVICE_NAME: "trust-svc"
  SERVICE_VERSION: "1.0.0"

  # Health check configuration
  HEALTH_CHECK_PORT: "8081"
  METRICS_PORT: "8081"

# gRPC TLS Configuration
grpc:
  tls:
    # Enable TLS for gRPC connections
    enabled: true

    # mTLS configuration
    mtls: true
    require_client_auth: true

    # Server certificate configuration
    server_cert: "/etc/tls/server/tls.crt"
    server_key: "/etc/tls/server/tls.key"

    # Client CA for mTLS (when require_client_auth or mtls is true)
    client_ca: "/etc/tls/ca/ca.crt"

    # Client certificate configuration (for outbound connections)
    client_cert: "/etc/tls/client/tls.crt"
    client_key: "/etc/tls/client/tls.key"

    # Secret names for TLS certificates
    secrets:
      server:
        name: "trust-svc-server-tls"
        cert_key: "tls.crt"
        key_key: "tls.key"
      client:
        name: "trust-svc-client-tls"
        cert_key: "tls.crt"
        key_key: "tls.key"
      ca:
        name: "trust-svc-ca"
        cert_key: "ca.crt"

# Database configuration
database:
  # Database connection string
  dsn: "postgresql://marty:password@postgres.marty.svc.cluster.local:5432/trust_svc"

  # Individual connection parameters (for services that need them separately)
  host: "postgres.marty.svc.cluster.local"
  port: 5432
  name: "trust_svc"
  user: "marty"
  password: ""

  # Database secret configuration
  passwordSecret:
    name: "trust-svc-db-secret"
    key: "password"

  # Connection pool settings
  pool:
    min_size: 1
    max_size: 10
    max_overflow: 20

# Object Storage configuration (S3-compatible)
objectStorage:
  enabled: true
  endpoint: "minio.marty.svc.cluster.local:9000"
  bucket: "trust-svc-storage"
  region: "us-east-1"
  use_ssl: false

  # Credentials configuration
  access_key: ""
  secret_key: ""

  # Secret configuration
  credentialsSecret:
    name: "trust-svc-storage-secret"
    access_key_key: "access-key"
    secret_key_key: "secret-key"

# Key Vault configuration (HashiCorp Vault or Azure Key Vault)
keyVault:
  enabled: false

  # Vault type: "hashicorp" or "azure"
  type: "hashicorp"

  # HashiCorp Vault configuration
  hashicorp:
    endpoint: "vault.marty.svc.cluster.local:8200"
    auth_method: "kubernetes"
    role: "trust-svc"
    mount_path: "auth/kubernetes"
    secrets_path: "secret/trust-svc"

  # Azure Key Vault configuration
  azure:
    vault_url: "https://marty-keyvault.vault.azure.net/"
    tenant_id: ""
    client_id: ""
    client_secret: ""

    # Secret configuration for Azure credentials
    credentialsSecret:
      name: "trust-svc-keyvault-secret"
      tenant_id_key: "tenant-id"
      client_id_key: "client-id"
      client_secret_key: "client-secret"

# Event Bus configuration (Kafka/NATS/RabbitMQ)
eventBus:
  # Event bus type: "kafka", "nats", or "rabbitmq"
  type: "kafka"

  # Kafka configuration
  kafka:
    brokers: "kafka.marty.svc.cluster.local:9092"
    topic_prefix: "trust-svc."
    consumer_group: "trust-svc-consumers"

    # Security configuration
    security:
      enabled: false
      protocol: "SASL_SSL"
      sasl_mechanism: "PLAIN"
      username: ""
      password: ""

      # Secret configuration
      credentialsSecret:
        name: "trust-svc-kafka-secret"
        username_key: "username"
        password_key: "password"

  # NATS configuration
  nats:
    servers: "nats.marty.svc.cluster.local:4222"
    subject_prefix: "trust-svc."

    # Security configuration
    security:
      enabled: false
      username: ""
      password: ""

      # Secret configuration
      credentialsSecret:
        name: "trust-svc-nats-secret"
        username_key: "username"
        password_key: "password"

  # RabbitMQ configuration
  rabbitmq:
    host: "rabbitmq.marty.svc.cluster.local"
    port: 5672
    vhost: "/"
    exchange_prefix: "trust-svc."

    # Security configuration
    username: ""
    password: ""

    # Secret configuration
    credentialsSecret:
      name: "trust-svc-rabbitmq-secret"
      username_key: "username"
      password_key: "password"

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: trust-svc.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Service-specific configuration
serviceConfig:
  # Trust Service specific configuration
  environment: production
  debug: false

  # PKD/HML sync configuration
  sync:
    pkdInterval: 3600
    hmlInterval: 1800
    maxRetries: 3
    retryDelay: 300

  # Trust settings
  trust:
    snapshotRetentionDays: 90
    maxCertAgeDays: 1095

  # Security settings
  cors:
    origins: ["*"]
    methods: ["GET", "POST", "PUT", "DELETE"]
    headers: ["*"]

# Migration job configuration
migration:
  enabled: true
  image:
    repository: marty/trust-svc
    tag: "latest"
    pullPolicy: IfNotPresent

  # Alembic configuration
  alembic:
    command: ["python", "-m", "alembic", "upgrade", "head"]
    config_file: "/app/alembic.ini"

  # Job configuration
  job:
    restartPolicy: Never
    backoffLimit: 3
    activeDeadlineSeconds: 600
    ttlSecondsAfterFinished: 86400

  # Resources for migration job
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Monitoring configuration
monitoring:
  # ServiceMonitor for Prometheus
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    port: metrics
    labels: {}

  # PodMonitor for metrics sidecars
  podMonitor:
    enabled: false
    interval: 30s
    path: /metrics
    port: metrics-sidecar
    labels: {}

# Service mesh configuration
serviceMesh:
  enabled: false
  type: "istio"  # "istio" or "linkerd"

  # Istio configuration
  istio:
    # Automatically inject sidecar
    injection: enabled

    # mTLS configuration
    mtls:
      mode: "STRICT"

    # Traffic policy
    trafficPolicy:
      tls:
        mode: "ISTIO_MUTUAL"

  # Linkerd configuration
  linkerd:
    # Automatically inject sidecar
    injection: enabled

    # mTLS is always enabled in Linkerd
    # Additional configurations can be added here

# Persistent volumes for data storage
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 5Gi
  annotations: {}

# ConfigMap and Secret configurations
configMap:
  create: true
  data: {}

secret:
  create: true
  data: {}

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network policies
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []
