[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "marty-grpc"
version = "1.0.0"
description = "Enterprise-grade microservices platform for secure digital identity document management (eMRTD, mDL, DTC) with ICAO PKI compliance (v1.0.0 - semver'd protobuf namespaces)"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Proprietary"}
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "grpcio>=1.59.0",
    "grpcio-tools>=1.59.0",
    "grpcio-health-checking>=1.59.0",
    "protobuf>=4.24.4",
    "pydantic>=2.4.2",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.2",
    "watchdog>=3.0.0",
    "cryptography>=41.0.7",
    "bcrypt>=4.0.0",
    "asn1crypto>=1.5.1",
    "cbor2>=5.4.6",
    "pillow>=10.1.0",
    "scipy>=1.11.4",
    "playwright>=1.40.0",
    "qrcode>=7.4.2",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-html>=4.1.1",
    "pytest-docker>=2.0.1",
    "docker>=6.1.0",
    "loguru>=0.7.2",
    "requests>=2.32.5",
    "pyjwt[crypto]>=2.9.0",
    "sqlalchemy[asyncio]>=2.0.29",
    "asyncpg>=0.29.0",
    "aioboto3>=13.1.1",
    "aiokafka>=0.8.1",
    "alembic>=1.13.1",
    "tenacity>=8.3.0",
    "pytest-depends>=1.0.1",
    "pyasn1>=0.6.1",
    "certvalidator>=0.11.1",
    "prometheus_client>=0.19.0",
    "opentelemetry-distro>=0.45b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.24.0",
    "opentelemetry-instrumentation-grpc>=0.45b0",
    # Enhanced OIDC4VC testing dependencies
    "jwcrypto>=1.5.0",
    "authlib>=1.2.0",
    "sd-jwt>=0.9.0",
    # OpenID4VP and mDoc/mDL presentation dependencies
    "cose>=0.9.dev8",
    # ISO 18013-5 mDL transport dependencies
    "bleak>=0.21.1", # BLE support for mDL transactions
    "pyscard>=2.0.7", # Smart card/NFC support
    "aiohttp>=3.9.0", # HTTP client for ISO 18013-7 online flows
    "psutil>=7.1.0",
]

[project.optional-dependencies]
biometric = [
    "face-recognition>=1.3.0",
    "opencv-contrib-python>=4.8.1.78",
    "scikit-image>=0.22.0",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-v",  # Verbose output
    "--tb=short",  # Short traceback format
    "--strict-markers",
    "--strict-config",
    "--color=yes",  # Force colored output
    "--durations=10",  # Show 10 slowest tests
    "--maxfail=5",  # Stop after 5 failures
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component workflows and real docker-compose service stack (no UI mock data)",
    "performance: Performance and load tests",
    "slow: Tests that take significant time to run",
    "security: Security-focused tests",
    "e2e: marks tests as end-to-end tests",
    "smoke: marks tests as smoke tests",
    "ui: marks tests as UI tests",
    "passport: marks tests as passport-related tests",
    "mdl: marks tests as mobile driver license tests",
    "admin: marks tests as admin interface tests",
    "mvp: marks tests that cover the defined MVP feature set",
    "depends: marks tests that depend on other tests",
    "oidc4vc: marks tests as OIDC4VC protocol tests",
    "sphereon: marks tests as Sphereon compatibility tests",
    "contract: marks tests as service contract tests",
    "chaos: marks tests as chaos engineering tests",
    "openid4vp: marks tests as OpenID4VP presentation protocol tests",
    "mdoc_presentation: marks tests for mDoc presentation flows",
    "mdl_presentation: marks tests for mDL presentation flows",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:cryptography.*",
    "ignore::pytest.PytestUnraisableExceptionWarning"
]
norecursedirs = [
    "docs",
    "build",
    "dist",
    ".tox",
    "venv",
    "env",
    "__pycache__"
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[project.scripts]
compile-protos = "src.compile_protos:compile_all_protos"
csca-service = "apps.csca_service:main"
document-signer = "apps.document_signer:main"
inspection-system = "apps.inspection_system:main"
mdl-engine = "apps.mdl_engine:main"
mdoc-engine = "apps.mdoc_engine:main"
passport-engine = "apps.passport_engine:main"
pkd-service = "apps.pkd_service:main"
trust-anchor = "apps.trust_anchor:main"
credential-ledger = "apps.credential_ledger:main"

[tool.ruff]
line-length = 100
target-version = "py39"
extend-exclude = [
    "marty-microservices-framework/templates/**/*",
    "templates/**/*",
    "demo-openwallet-sdk/**/*",
    "docker/**/*",
    "helm/**/*",
    "k8s/**/*",
    "terraform/**/*",
    "data/**/*",
    "temp_debug/**/*",
    "test_env/**/*",
    "build/**/*",
    "dist/**/*",
    ".venv/**/*",
    "*.generated.py",
    "*_pb2.py",
    "*_pb2_grpc.py",
]

[tool.ruff.lint]
# Start with basic essential checks only
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
]

# Ignore most issues for gradual adoption
ignore = [
    "E722",   # Do not use bare except
    "F401",   # Imported but unused
    "F841",   # Local variable assigned but never used
    "E402",   # Module level import not at top
    # TEMPORARY: Relax long line enforcement to unblock initial framework import
    # Will be removed in follow-up issue to reflow or suppress specific cases
    "E501",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ALL"]
"**/test_*.py" = ["ALL"]
"**/*test*.py" = ["ALL"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "marty_grpc"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"
# Strict mode settings for strong typing
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_any_generics = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true  # Replaces deprecated strict_concatenate
disallow_subclassing_any = true
disallow_untyped_calls = true
# Import handling
ignore_missing_imports = false
follow_imports = "normal"
follow_imports_for_stubs = true
# Error reporting
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true
# Miscellaneous
implicit_reexport = false
strict_optional = true
namespace_packages = true
# Incremental mode
incremental = true
cache_dir = ".mypy_cache"
# Module discovery - use explicit module discovery
mypy_path = "src"
explicit_package_bases = true
# Service-specific paths for better coverage
files = ["src/services/", "src/marty_common/"]

# Generated protobuf files - no type checking
[[tool.mypy.overrides]]
module = "src.proto.*"
ignore_errors = true

# Service-specific module configuration
# Allow relaxed typing for gRPC protobuf integration
[[tool.mypy.overrides]]
module = [
    "services.trust_anchor",
    "services.document_signer.document_signer",
    "services.certificate_lifecycle_manager",
    "services.csca",
    "services.pkd_service",
    "services.mdl_engine",
    "services.dtc_engine",
    "services.passport_engine",
    "services.mdoc_engine"
]
# Disable specific error codes that conflict with gRPC protobuf usage
disable_error_code = ["misc", "attr-defined"]

# Core typed services - these should have zero errors
[[tool.mypy.overrides]]
module = [
    "marty_common.grpc_types"
]
strict = true
warn_unreachable = true
warn_unused_ignores = true

# Proto-generated files - completely ignore all protobuf files
[[tool.mypy.overrides]]
module = "proto.*"
ignore_errors = true
[[tool.mypy.overrides]]
module = "src.proto.*"
ignore_errors = true

# Imports with src prefix patterns - ignore import-related errors
[[tool.mypy.overrides]]
module = [
    "src.*"
]
ignore_missing_imports = true

# Additional missing module patterns
[[tool.mypy.overrides]]
module = [
    "certvalidator.*"
]
ignore_missing_imports = true

# Modules needing gradual typing improvements
[[tool.mypy.overrides]]
module = [
    "marty_common.exceptions",
    "marty_common.models.*",
    "marty_common.utils.*",
    "marty_common.rfid.*",
    "marty_common.hardware.*",
    "marty_common.middleware.*",
    "marty_common.monitoring.*",
    "marty_common.validation.*",
    "marty_common.vc.*",
    "marty_common.crypto.*",
    "marty_common.security.*",
    "marty_common.grpc_interceptors",
    "marty_common.grpc_logging",
    "marty_common.grpc_types",
    "marty_common.error_handling",
    "marty_common.config",
    "marty_common.logging_config",
    "services.*"
]
disallow_untyped_defs = false
disable_error_code = ["misc", "attr-defined", "no-untyped-def", "assignment", "arg-type", "no-any-return", "name-defined", "import-not-found", "import-untyped", "call-overload", "union-attr", "unreachable", "unused-ignore", "type-arg", "call-arg", "return-value", "index", "operator", "var-annotated", "unused-coroutine", "await-not-async", "no-untyped-call", "has-type", "return", "override", "no-redef", "truthy-function", "dict-item", "abstract"]

# Service modules still being improved
[[tool.mypy.overrides]]
module = [
    "services.rfid_reader_service",
    "services.inspection_system",
    "services.certificate_rotation_service",
    "services.credential_ledger"
]
disallow_untyped_defs = false
disable_error_code = ["misc", "attr-defined", "no-untyped-def", "name-defined", "import", "arg-type", "assignment"]

# Tests - relaxed type checking
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_any_generics = false

# Third-party packages without stubs
[[tool.mypy.overrides]]
module = [
    "grpc.*",
    "grpcio.*",
    "aiokafka.*",
    "aioboto3.*",
    "playwright.*",
    "asn1crypto.*",
    "cbor2.*",
    "qrcode.*",
    "face_recognition.*",
    "cv2.*",
    "skimage.*",
    "loguru.*",
    "alembic.*",
    "tenacity.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "src/tests"]
skips = [
    "B101",  # Skip assert_used test
    "B404",  # Skip subprocess import warnings (handled by ruff)
    "B603",  # Skip subprocess without shell=True when properly used
]

[tool.bandit.assert_used]
skips = ["*_test.py", "*test*.py"]

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107"]
match_dir = "(?!tests|migrations).*"

[tool.xenon]
max_average = "B"
max_modules = "B"
max_absolute = "B"
ignore = ["migrations", "tests"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]



[tool.uv]
# UV-specific configurations - fixed format
sources = { marty-grpc = { path = ".", editable = true } }

[dependency-groups]
dev = [
    "playwright>=1.48.0",
    "pytest-html>=4.1.1",
    "pytest-xdist>=3.6.1",
    "pytest-asyncio>=0.24.0",
    # Code quality tools
    "pre-commit>=3.6.0",
    "black>=24.2.0",
    "isort>=5.13.2",
    "mypy>=1.8.0",
    "bandit>=1.7.5",
    "xenon>=0.9.1",
    "pydocstyle>=6.3.0",
    "safety>=3.0.0",
    "radon>=6.0.1",
    # Type stubs
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    "grpcio-testing>=1.75.0",
    "ruff>=0.13.2",
    "pyyaml>=6.0.3",
    "aiohttp>=3.12.15",
    "prometheus-client>=0.23.1",
    # Additional OIDC4VC testing dependencies
    "httpx>=0.25.0",
    "websockets>=12.0",
    "responses>=0.24.0",
]
