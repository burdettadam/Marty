# Microsoft Authenticator Demo Environment - Full Setup
# Complete setup with additional services for production-like testing
# Uses the consolidated microsoft_demo structure

networks:
  marty-microsoft-network:
    driver: bridge

volumes:
  microsoft_demo_postgres_data:
  microsoft_demo_minio_data:
  microsoft_demo_vault_data:
  traefik-certificates:

services:
  # PostgreSQL with schemas for Microsoft demo
  postgres-microsoft:
    image: postgres:15
    container_name: marty-microsoft-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-martyuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-martypassword}
      POSTGRES_DB: ${POSTGRES_DB:-martydb}
      POSTGRES_MULTIPLE_DATABASES: "martydb,trust_db,credentials_db,audit_db"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - microsoft_demo_postgres_data:/var/lib/postgresql/data
      - ../../../scripts/init-demo-db.sql:/docker-entrypoint-initdb.d/init-demo-db.sql
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-martyuser} -d ${POSTGRES_DB:-martydb}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MinIO Object Storage for credential storage
  minio-microsoft:
    image: minio/minio:latest
    container_name: marty-microsoft-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - microsoft_demo_minio_data:/data
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s

  # HashiCorp Vault for secrets management
  vault-microsoft:
    image: hashicorp/vault:latest
    container_name: marty-microsoft-vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-myroot}
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    ports:
      - "${VAULT_PORT:-8200}:8200"
    volumes:
      - microsoft_demo_vault_data:/vault/data
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Traefik reverse proxy for HTTPS
  traefik-microsoft:
    image: traefik:v2.10
    container_name: marty-microsoft-traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@marty.local}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=${ACME_CA_SERVER:-https://acme-staging-v02.api.letsencrypt.org/directory}"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/certificates
    networks:
      - marty-microsoft-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.marty.local`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # OID4VCI Issuer API - Microsoft Authenticator credential issuance
  issuer-api-microsoft:
    image: python:3.10-slim
    container_name: marty-microsoft-issuer-api
    environment:
      - ISSUER_BASE_URL=${ISSUER_BASE_URL:-https://localhost:8000}
      - CREDENTIAL_ISSUER_DID=${CREDENTIAL_ISSUER_DID:-did:web:localhost%3A8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://localhost:3000,https://localhost:8000,https://localhost:8001}
      - PORT_FORWARD_MODE=${PORT_FORWARD_MODE:-false}
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/${POSTGRES_DB:-martydb}
      - MINIO_ENDPOINT=minio-microsoft:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - VAULT_URL=http://vault-microsoft:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN:-myroot}
    ports:
      - "${ISSUER_PORT:-8000}:8000"
    working_dir: /app
    command:
      - bash
      - -c
      - |
        echo "Installing dependencies..."
        pip install --no-cache-dir fastapi uvicorn[standard] pydantic qrcode[pil] jinja2 python-multipart \
                                   psycopg2-binary minio hvac sqlalchemy

        echo "Waiting for dependencies..."
        sleep 10

        echo "Starting Microsoft Demo Issuer API..."
        python -m uvicorn issuer_api:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ../issuer_api.py:/app/issuer_api.py:ro
      - ../verifier_api.py:/app/verifier_api.py:ro
      - ../__init__.py:/app/__init__.py:ro
    networks:
      - marty-microsoft-network
    depends_on:
      postgres-microsoft:
        condition: service_healthy
      minio-microsoft:
        condition: service_healthy
      vault-microsoft:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.issuer.rule=Host(`issuer.marty.local`)"
      - "traefik.http.routers.issuer.entrypoints=websecure"
      - "traefik.http.routers.issuer.tls.certresolver=letsencrypt"
      - "traefik.http.services.issuer.loadbalancer.server.port=8000"

  # OID4VP Verifier API - Microsoft Authenticator credential verification
  verifier-api-microsoft:
    image: python:3.10-slim
    container_name: marty-microsoft-verifier-api
    environment:
      - VERIFIER_BASE_URL=${VERIFIER_BASE_URL:-https://localhost:8001}
      - VERIFIER_DID=${VERIFIER_DID:-did:web:localhost%3A8001}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://localhost:3000,https://localhost:8000,https://localhost:8001}
      - PORT_FORWARD_MODE=${PORT_FORWARD_MODE:-false}
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/${POSTGRES_DB:-martydb}
      - MINIO_ENDPOINT=minio-microsoft:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - VAULT_URL=http://vault-microsoft:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN:-myroot}
    ports:
      - "${VERIFIER_PORT:-8001}:8001"
    working_dir: /app
    command:
      - bash
      - -c
      - |
        echo "Installing dependencies..."
        pip install --no-cache-dir fastapi uvicorn[standard] pydantic qrcode[pil] jinja2 python-multipart \
                                   psycopg2-binary minio hvac sqlalchemy

        echo "Waiting for dependencies..."
        sleep 10

        echo "Starting Microsoft Demo Verifier API..."
        python -m uvicorn verifier_api:app --host 0.0.0.0 --port 8001 --reload
    volumes:
      - ../issuer_api.py:/app/issuer_api.py:ro
      - ../verifier_api.py:/app/verifier_api.py:ro
      - ../__init__.py:/app/__init__.py:ro
    networks:
      - marty-microsoft-network
    depends_on:
      postgres-microsoft:
        condition: service_healthy
      minio-microsoft:
        condition: service_healthy
      vault-microsoft:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.verifier.rule=Host(`verifier.marty.local`)"
      - "traefik.http.routers.verifier.entrypoints=websecure"
      - "traefik.http.routers.verifier.tls.certresolver=letsencrypt"
      - "traefik.http.services.verifier.loadbalancer.server.port=8001"

  # Demo initialization service
  demo-init-microsoft:
    image: python:3.10-slim
    container_name: marty-microsoft-demo-init
    environment:
      - ISSUER_API_URL=http://issuer-api-microsoft:8000
      - VERIFIER_API_URL=http://verifier-api-microsoft:8001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/${POSTGRES_DB:-martydb}
    command:
      - bash
      - -c
      - |
        pip install --no-cache-dir requests psycopg2-binary
        echo "Demo initialization would run here..."
        echo "Issuer API: $ISSUER_API_URL"
        echo "Verifier API: $VERIFIER_API_URL"
        echo "Demo initialization complete!"
    depends_on:
      issuer-api-microsoft:
        condition: service_healthy
      verifier-api-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network

# Environment variables example:
# Create a .env.demo file in the same directory with:
#
# # API Configuration
# ISSUER_BASE_URL=https://issuer.marty.local
# VERIFIER_BASE_URL=https://verifier.marty.local
# CREDENTIAL_ISSUER_DID=did:web:issuer.marty.local
#
# # Service Ports
# ISSUER_PORT=8000
# VERIFIER_PORT=8001
#
# # CORS Configuration
# CORS_ORIGINS=https://issuer.marty.local,https://verifier.marty.local
#
# # Database Configuration
# POSTGRES_USER=martyuser
# POSTGRES_PASSWORD=martypassword
# POSTGRES_DB=martydb
# POSTGRES_PORT=5433
#
# # MinIO Configuration
# MINIO_ROOT_USER=minioadmin
# MINIO_ROOT_PASSWORD=minioadmin123
# MINIO_PORT=9000
# MINIO_CONSOLE_PORT=9001
#
# # Vault Configuration
# VAULT_ROOT_TOKEN=myroot
# VAULT_PORT=8200
#
# # HTTPS/TLS Configuration
# ACME_EMAIL=admin@marty.local
# ACME_CA_SERVER=https://acme-staging-v02.api.letsencrypt.org/directory
#
# # Logging
# LOG_LEVEL=INFO
