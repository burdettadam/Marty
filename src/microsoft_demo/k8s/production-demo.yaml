---
apiVersion: v1
kind: Namespace
metadata:
  name: marty-microsoft-demo
  labels:
    name: marty-microsoft-demo
    environment: demo
    app.kubernetes.io/name: marty-microsoft-demo

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microsoft-demo-config
  namespace: marty-microsoft-demo
data:
  # Database Configuration
  POSTGRES_DB: "martydb"
  POSTGRES_USER: "martyuser"
  
  # Service URLs (will be updated by configure-urls script)
  ISSUER_BASE_URL: "https://7bmt9pc1-8000.usw3.devtunnels.ms"
  VERIFIER_BASE_URL: "https://7bmt9pc1-8001.usw3.devtunnels.ms" 
  CREDENTIAL_ISSUER_DID: "did:web:7bmt9pc1-8000.usw3.devtunnels.ms"
  VERIFIER_DID: "did:web:7bmt9pc1-8001.usw3.devtunnels.ms"
  
  # CORS and Security
  CORS_ORIGINS: "https://7bmt9pc1-8000.usw3.devtunnels.ms,https://7bmt9pc1-8001.usw3.devtunnels.ms,http://localhost:30000,http://localhost:30001,https://localhost:30000,https://localhost:30001"
  
  # Application Configuration
  LOG_LEVEL: "INFO"
  PORT_FORWARD_MODE: "false"
  
  # MinIO Configuration
  MINIO_ENDPOINT: "minio-service:9000"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_BUCKET: "credentials"
  
  # Vault Configuration
  VAULT_URL: "http://vault-service:8200"

---
apiVersion: v1
kind: Secret
metadata:
  name: microsoft-demo-secrets
  namespace: marty-microsoft-demo
type: Opaque
data:
  # Database secrets
  POSTGRES_PASSWORD: bWFydHlwYXNzd29yZA==  # "martypassword" base64 encoded
  
  # MinIO secrets
  MINIO_SECRET_KEY: bWluaW9hZG1pbjEyMw==  # "minioadmin123" base64 encoded
  
  # Vault secrets
  VAULT_TOKEN: bXlyb290  # "myroot" base64 encoded

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: marty-microsoft-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: marty-microsoft-demo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: marty-microsoft-demo
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
        - name: postgres
          image: postgres:15
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 15
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: marty-microsoft-demo
  labels:
    app: postgres
    component: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: marty-microsoft-demo
  labels:
    app: minio
    component: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
        component: storage
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          command:
            - /bin/bash
            - -c
            - minio server /data --console-address ":9001"
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: MINIO_ACCESS_KEY
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: MINIO_SECRET_KEY
          ports:
            - containerPort: 9000
              name: api
            - containerPort: 9001
              name: console
          volumeMounts:
            - name: minio-storage
              mountPath: /data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: minio-storage
          persistentVolumeClaim:
            claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: marty-microsoft-demo
  labels:
    app: minio
    component: storage
spec:
  ports:
    - port: 9000
      targetPort: 9000
      name: api
    - port: 9001
      targetPort: 9001
      name: console
  selector:
    app: minio

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
  namespace: marty-microsoft-demo
  labels:
    app: vault
    component: secrets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
        component: secrets
    spec:
      containers:
        - name: vault
          image: hashicorp/vault:latest
          env:
            - name: VAULT_DEV_ROOT_TOKEN_ID
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: VAULT_TOKEN
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: "0.0.0.0:8200"
          ports:
            - containerPort: 8200
              name: vault
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /v1/sys/health
              port: 8200
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /v1/sys/health
              port: 8200
            initialDelaySeconds: 30
            periodSeconds: 10
          securityContext:
            capabilities:
              add:
                - IPC_LOCK

---
apiVersion: v1
kind: Service
metadata:
  name: vault-service
  namespace: marty-microsoft-demo
  labels:
    app: vault
    component: secrets
spec:
  ports:
    - port: 8200
      targetPort: 8200
      name: vault
  selector:
    app: vault

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: issuer-api-code
  namespace: marty-microsoft-demo
data:
  issuer_api.py: |
    # This will be populated by the deployment script
    from fastapi import FastAPI
    app = FastAPI(title="Microsoft Demo Issuer API", version="1.0.0")
    
    @app.get("/health")
    def health():
        return {"status": "healthy", "service": "issuer-api"}
    
    @app.get("/")
    def root():
        return {"message": "Microsoft Demo Issuer API", "version": "1.0.0"}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: verifier-api-code
  namespace: marty-microsoft-demo
data:
  verifier_api.py: |
    # This will be populated by the deployment script
    from fastapi import FastAPI
    app = FastAPI(title="Microsoft Demo Verifier API", version="1.0.0")
    
    @app.get("/health")
    def health():
        return {"status": "healthy", "service": "verifier-api"}
    
    @app.get("/")
    def root():
        return {"message": "Microsoft Demo Verifier API", "version": "1.0.0"}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: issuer-api
  namespace: marty-microsoft-demo
  labels:
    app: issuer-api
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: issuer-api
  template:
    metadata:
      labels:
        app: issuer-api
        component: api
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15
          command:
            - /bin/bash
            - -c
            - |
              until pg_isready -h postgres-service -p 5432 -U $POSTGRES_USER; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_USER
      containers:
        - name: issuer-api
          image: python:3.10-slim
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Installing dependencies..."
              pip install --no-cache-dir \
                fastapi uvicorn[standard] pydantic qrcode[pil] jinja2 \
                python-multipart psycopg2-binary minio hvac sqlalchemy
              
              echo "Setting up application..."
              mkdir -p /app
              cp /config/issuer_api.py /app/
              
              echo "Starting issuer API..."
              cd /app
              uvicorn issuer_api:app --host 0.0.0.0 --port 8000
          env:
            - name: ISSUER_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: ISSUER_BASE_URL
            - name: CREDENTIAL_ISSUER_DID
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: CREDENTIAL_ISSUER_DID
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: LOG_LEVEL
            - name: CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: CORS_ORIGINS
            - name: DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_DB
            - name: MINIO_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: MINIO_ENDPOINT
            - name: MINIO_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: MINIO_SECRET_KEY
            - name: VAULT_URL
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: VAULT_URL
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: VAULT_TOKEN
          ports:
            - containerPort: 8000
              name: http
          volumeMounts:
            - name: api-code
              mountPath: /config
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "1000m"
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: api-code
          configMap:
            name: issuer-api-code

---
apiVersion: v1
kind: Service
metadata:
  name: issuer-api-service
  namespace: marty-microsoft-demo
  labels:
    app: issuer-api
    component: api
spec:
  type: NodePort
  ports:
    - port: 8000
      targetPort: 8000
      nodePort: 30000
      name: http
  selector:
    app: issuer-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: verifier-api
  namespace: marty-microsoft-demo
  labels:
    app: verifier-api
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: verifier-api
  template:
    metadata:
      labels:
        app: verifier-api
        component: api
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15
          command:
            - /bin/bash
            - -c
            - |
              until pg_isready -h postgres-service -p 5432 -U $POSTGRES_USER; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_USER
      containers:
        - name: verifier-api
          image: python:3.10-slim
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Installing dependencies..."
              pip install --no-cache-dir \
                fastapi uvicorn[standard] pydantic qrcode[pil] jinja2 \
                python-multipart psycopg2-binary minio hvac sqlalchemy
              
              echo "Setting up application..."
              mkdir -p /app
              cp /config/verifier_api.py /app/
              
              echo "Starting verifier API..."
              cd /app
              uvicorn verifier_api:app --host 0.0.0.0 --port 8001
          env:
            - name: VERIFIER_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: VERIFIER_BASE_URL
            - name: VERIFIER_DID
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: VERIFIER_DID
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: LOG_LEVEL
            - name: CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: CORS_ORIGINS
            - name: DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: POSTGRES_DB
            - name: MINIO_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: MINIO_ENDPOINT
            - name: MINIO_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: MINIO_SECRET_KEY
            - name: VAULT_URL
              valueFrom:
                configMapKeyRef:
                  name: microsoft-demo-config
                  key: VAULT_URL
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: microsoft-demo-secrets
                  key: VAULT_TOKEN
          ports:
            - containerPort: 8001
              name: http
          volumeMounts:
            - name: api-code
              mountPath: /config
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "1000m"
          readinessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: api-code
          configMap:
            name: verifier-api-code

---
apiVersion: v1
kind: Service
metadata:
  name: verifier-api-service
  namespace: marty-microsoft-demo
  labels:
    app: verifier-api
    component: api
spec:
  type: NodePort
  ports:
    - port: 8001
      targetPort: 8001
      nodePort: 30001
      name: http
  selector:
    app: verifier-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microsoft-demo-ingress
  namespace: marty-microsoft-demo
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: issuer.marty.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: issuer-api-service
                port:
                  number: 8000
    - host: verifier.marty.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: verifier-api-service
                port:
                  number: 8001