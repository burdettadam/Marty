# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

from typing import NoReturn

import grpc

from . import rfid_service_pb2 as rfid__service__pb2

GRPC_GENERATED_VERSION = "1.75.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
         " but the generated code in rfid_service_pb2_grpc.py depends on"
         f" grpcio>={GRPC_GENERATED_VERSION}."
         f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
         f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RFIDReaderServiceStub:
    """RFID Reader Service for smart card and NFC operations"""

    def __init__(self, channel) -> None:
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListReaders = channel.unary_unary(
            "/rfid.RFIDReaderService/ListReaders",
            request_serializer=rfid__service__pb2.ListReadersRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.ListReadersResponse.FromString,
            _registered_method=True,
        )
        self.ConnectReader = channel.unary_unary(
            "/rfid.RFIDReaderService/ConnectReader",
            request_serializer=rfid__service__pb2.ConnectReaderRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.ConnectReaderResponse.FromString,
            _registered_method=True,
        )
        self.DisconnectReader = channel.unary_unary(
            "/rfid.RFIDReaderService/DisconnectReader",
            request_serializer=rfid__service__pb2.DisconnectReaderRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.DisconnectReaderResponse.FromString,
            _registered_method=True,
        )
        self.GetReaderStatus = channel.unary_unary(
            "/rfid.RFIDReaderService/GetReaderStatus",
            request_serializer=rfid__service__pb2.GetReaderStatusRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.GetReaderStatusResponse.FromString,
            _registered_method=True,
        )
        self.ReadCard = channel.unary_unary(
            "/rfid.RFIDReaderService/ReadCard",
            request_serializer=rfid__service__pb2.ReadCardRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.ReadCardResponse.FromString,
            _registered_method=True,
        )
        self.SendAPDU = channel.unary_unary(
            "/rfid.RFIDReaderService/SendAPDU",
            request_serializer=rfid__service__pb2.SendAPDURequest.SerializeToString,
            response_deserializer=rfid__service__pb2.SendAPDUResponse.FromString,
            _registered_method=True,
        )
        self.GetATR = channel.unary_unary(
            "/rfid.RFIDReaderService/GetATR",
            request_serializer=rfid__service__pb2.GetATRRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.GetATRResponse.FromString,
            _registered_method=True,
        )
        self.ReadPassport = channel.unary_unary(
            "/rfid.RFIDReaderService/ReadPassport",
            request_serializer=rfid__service__pb2.ReadPassportRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.ReadPassportResponse.FromString,
            _registered_method=True,
        )
        self.VerifyDocument = channel.unary_unary(
            "/rfid.RFIDReaderService/VerifyDocument",
            request_serializer=rfid__service__pb2.VerifyDocumentRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.VerifyDocumentResponse.FromString,
            _registered_method=True,
        )
        self.ExtractBiometrics = channel.unary_unary(
            "/rfid.RFIDReaderService/ExtractBiometrics",
            request_serializer=rfid__service__pb2.ExtractBiometricsRequest.SerializeToString,
            response_deserializer=rfid__service__pb2.ExtractBiometricsResponse.FromString,
            _registered_method=True,
        )


class RFIDReaderServiceServicer:
    """RFID Reader Service for smart card and NFC operations"""

    def ListReaders(self, request, context) -> NoReturn:
        """Reader management"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def ConnectReader(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def DisconnectReader(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def GetReaderStatus(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def ReadCard(self, request, context) -> NoReturn:
        """Card operations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def SendAPDU(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def GetATR(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def ReadPassport(self, request, context) -> NoReturn:
        """Document operations"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def VerifyDocument(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def ExtractBiometrics(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)


def add_RFIDReaderServiceServicer_to_server(servicer, server) -> None:
    rpc_method_handlers = {
        "ListReaders": grpc.unary_unary_rpc_method_handler(
            servicer.ListReaders,
            request_deserializer=rfid__service__pb2.ListReadersRequest.FromString,
            response_serializer=rfid__service__pb2.ListReadersResponse.SerializeToString,
        ),
        "ConnectReader": grpc.unary_unary_rpc_method_handler(
            servicer.ConnectReader,
            request_deserializer=rfid__service__pb2.ConnectReaderRequest.FromString,
            response_serializer=rfid__service__pb2.ConnectReaderResponse.SerializeToString,
        ),
        "DisconnectReader": grpc.unary_unary_rpc_method_handler(
            servicer.DisconnectReader,
            request_deserializer=rfid__service__pb2.DisconnectReaderRequest.FromString,
            response_serializer=rfid__service__pb2.DisconnectReaderResponse.SerializeToString,
        ),
        "GetReaderStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetReaderStatus,
            request_deserializer=rfid__service__pb2.GetReaderStatusRequest.FromString,
            response_serializer=rfid__service__pb2.GetReaderStatusResponse.SerializeToString,
        ),
        "ReadCard": grpc.unary_unary_rpc_method_handler(
            servicer.ReadCard,
            request_deserializer=rfid__service__pb2.ReadCardRequest.FromString,
            response_serializer=rfid__service__pb2.ReadCardResponse.SerializeToString,
        ),
        "SendAPDU": grpc.unary_unary_rpc_method_handler(
            servicer.SendAPDU,
            request_deserializer=rfid__service__pb2.SendAPDURequest.FromString,
            response_serializer=rfid__service__pb2.SendAPDUResponse.SerializeToString,
        ),
        "GetATR": grpc.unary_unary_rpc_method_handler(
            servicer.GetATR,
            request_deserializer=rfid__service__pb2.GetATRRequest.FromString,
            response_serializer=rfid__service__pb2.GetATRResponse.SerializeToString,
        ),
        "ReadPassport": grpc.unary_unary_rpc_method_handler(
            servicer.ReadPassport,
            request_deserializer=rfid__service__pb2.ReadPassportRequest.FromString,
            response_serializer=rfid__service__pb2.ReadPassportResponse.SerializeToString,
        ),
        "VerifyDocument": grpc.unary_unary_rpc_method_handler(
            servicer.VerifyDocument,
            request_deserializer=rfid__service__pb2.VerifyDocumentRequest.FromString,
            response_serializer=rfid__service__pb2.VerifyDocumentResponse.SerializeToString,
        ),
        "ExtractBiometrics": grpc.unary_unary_rpc_method_handler(
            servicer.ExtractBiometrics,
            request_deserializer=rfid__service__pb2.ExtractBiometricsRequest.FromString,
            response_serializer=rfid__service__pb2.ExtractBiometricsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "rfid.RFIDReaderService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("rfid.RFIDReaderService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class RFIDReaderService:
    """RFID Reader Service for smart card and NFC operations"""

    @staticmethod
    def ListReaders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/ListReaders",
            rfid__service__pb2.ListReadersRequest.SerializeToString,
            rfid__service__pb2.ListReadersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ConnectReader(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/ConnectReader",
            rfid__service__pb2.ConnectReaderRequest.SerializeToString,
            rfid__service__pb2.ConnectReaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DisconnectReader(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/DisconnectReader",
            rfid__service__pb2.DisconnectReaderRequest.SerializeToString,
            rfid__service__pb2.DisconnectReaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetReaderStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/GetReaderStatus",
            rfid__service__pb2.GetReaderStatusRequest.SerializeToString,
            rfid__service__pb2.GetReaderStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadCard(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/ReadCard",
            rfid__service__pb2.ReadCardRequest.SerializeToString,
            rfid__service__pb2.ReadCardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendAPDU(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/SendAPDU",
            rfid__service__pb2.SendAPDURequest.SerializeToString,
            rfid__service__pb2.SendAPDUResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetATR(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/GetATR",
            rfid__service__pb2.GetATRRequest.SerializeToString,
            rfid__service__pb2.GetATRResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadPassport(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/ReadPassport",
            rfid__service__pb2.ReadPassportRequest.SerializeToString,
            rfid__service__pb2.ReadPassportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def VerifyDocument(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/VerifyDocument",
            rfid__service__pb2.VerifyDocumentRequest.SerializeToString,
            rfid__service__pb2.VerifyDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ExtractBiometrics(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rfid.RFIDReaderService/ExtractBiometrics",
            rfid__service__pb2.ExtractBiometricsRequest.SerializeToString,
            rfid__service__pb2.ExtractBiometricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
