# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from . import csca_service_pb2 as csca__service__pb2

GRPC_GENERATED_VERSION = "1.75.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in csca_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CscaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCscaData = channel.unary_unary(
            "/csca.CscaService/GetCscaData",
            request_serializer=csca__service__pb2.CscaRequest.SerializeToString,
            response_deserializer=csca__service__pb2.CscaResponse.FromString,
            _registered_method=True,
        )
        self.CreateCertificate = channel.unary_unary(
            "/csca.CscaService/CreateCertificate",
            request_serializer=csca__service__pb2.CreateCertificateRequest.SerializeToString,
            response_deserializer=csca__service__pb2.CreateCertificateResponse.FromString,
            _registered_method=True,
        )
        self.RenewCertificate = channel.unary_unary(
            "/csca.CscaService/RenewCertificate",
            request_serializer=csca__service__pb2.RenewCertificateRequest.SerializeToString,
            response_deserializer=csca__service__pb2.CreateCertificateResponse.FromString,
            _registered_method=True,
        )
        self.RevokeCertificate = channel.unary_unary(
            "/csca.CscaService/RevokeCertificate",
            request_serializer=csca__service__pb2.RevokeCertificateRequest.SerializeToString,
            response_deserializer=csca__service__pb2.RevokeCertificateResponse.FromString,
            _registered_method=True,
        )
        self.GetCertificateStatus = channel.unary_unary(
            "/csca.CscaService/GetCertificateStatus",
            request_serializer=csca__service__pb2.CertificateStatusRequest.SerializeToString,
            response_deserializer=csca__service__pb2.CertificateStatusResponse.FromString,
            _registered_method=True,
        )
        self.ListCertificates = channel.unary_unary(
            "/csca.CscaService/ListCertificates",
            request_serializer=csca__service__pb2.ListCertificatesRequest.SerializeToString,
            response_deserializer=csca__service__pb2.ListCertificatesResponse.FromString,
            _registered_method=True,
        )
        self.CheckExpiringCertificates = channel.unary_unary(
            "/csca.CscaService/CheckExpiringCertificates",
            request_serializer=csca__service__pb2.CheckExpiringCertificatesRequest.SerializeToString,
            response_deserializer=csca__service__pb2.ListCertificatesResponse.FromString,
            _registered_method=True,
        )


class CscaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCscaData(self, request, context):
        """Existing method"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateCertificate(self, request, context):
        """Certificate lifecycle management methods"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RenewCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RevokeCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetCertificateStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListCertificates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckExpiringCertificates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CscaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetCscaData": grpc.unary_unary_rpc_method_handler(
            servicer.GetCscaData,
            request_deserializer=csca__service__pb2.CscaRequest.FromString,
            response_serializer=csca__service__pb2.CscaResponse.SerializeToString,
        ),
        "CreateCertificate": grpc.unary_unary_rpc_method_handler(
            servicer.CreateCertificate,
            request_deserializer=csca__service__pb2.CreateCertificateRequest.FromString,
            response_serializer=csca__service__pb2.CreateCertificateResponse.SerializeToString,
        ),
        "RenewCertificate": grpc.unary_unary_rpc_method_handler(
            servicer.RenewCertificate,
            request_deserializer=csca__service__pb2.RenewCertificateRequest.FromString,
            response_serializer=csca__service__pb2.CreateCertificateResponse.SerializeToString,
        ),
        "RevokeCertificate": grpc.unary_unary_rpc_method_handler(
            servicer.RevokeCertificate,
            request_deserializer=csca__service__pb2.RevokeCertificateRequest.FromString,
            response_serializer=csca__service__pb2.RevokeCertificateResponse.SerializeToString,
        ),
        "GetCertificateStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetCertificateStatus,
            request_deserializer=csca__service__pb2.CertificateStatusRequest.FromString,
            response_serializer=csca__service__pb2.CertificateStatusResponse.SerializeToString,
        ),
        "ListCertificates": grpc.unary_unary_rpc_method_handler(
            servicer.ListCertificates,
            request_deserializer=csca__service__pb2.ListCertificatesRequest.FromString,
            response_serializer=csca__service__pb2.ListCertificatesResponse.SerializeToString,
        ),
        "CheckExpiringCertificates": grpc.unary_unary_rpc_method_handler(
            servicer.CheckExpiringCertificates,
            request_deserializer=csca__service__pb2.CheckExpiringCertificatesRequest.FromString,
            response_serializer=csca__service__pb2.ListCertificatesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("csca.CscaService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("csca.CscaService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class CscaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCscaData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/GetCscaData",
            csca__service__pb2.CscaRequest.SerializeToString,
            csca__service__pb2.CscaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateCertificate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/CreateCertificate",
            csca__service__pb2.CreateCertificateRequest.SerializeToString,
            csca__service__pb2.CreateCertificateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RenewCertificate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/RenewCertificate",
            csca__service__pb2.RenewCertificateRequest.SerializeToString,
            csca__service__pb2.CreateCertificateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RevokeCertificate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/RevokeCertificate",
            csca__service__pb2.RevokeCertificateRequest.SerializeToString,
            csca__service__pb2.RevokeCertificateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetCertificateStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/GetCertificateStatus",
            csca__service__pb2.CertificateStatusRequest.SerializeToString,
            csca__service__pb2.CertificateStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListCertificates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/ListCertificates",
            csca__service__pb2.ListCertificatesRequest.SerializeToString,
            csca__service__pb2.ListCertificatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CheckExpiringCertificates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/csca.CscaService/CheckExpiringCertificates",
            csca__service__pb2.CheckExpiringCertificatesRequest.SerializeToString,
            csca__service__pb2.ListCertificatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
