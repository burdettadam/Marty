# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import trust_anchor_pb2 as trust__anchor__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in trust_anchor_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TrustAnchorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyTrust = channel.unary_unary(
                '/trust.TrustAnchor/VerifyTrust',
                request_serializer=trust__anchor__pb2.TrustRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.TrustResponse.FromString,
                _registered_method=True)
        self.GetMasterList = channel.unary_unary(
                '/trust.TrustAnchor/GetMasterList',
                request_serializer=trust__anchor__pb2.GetMasterListRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.MasterListResponse.FromString,
                _registered_method=True)
        self.UploadMasterList = channel.unary_unary(
                '/trust.TrustAnchor/UploadMasterList',
                request_serializer=trust__anchor__pb2.UploadMasterListRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.UploadMasterListResponse.FromString,
                _registered_method=True)
        self.VerifyCertificate = channel.unary_unary(
                '/trust.TrustAnchor/VerifyCertificate',
                request_serializer=trust__anchor__pb2.VerifyCertificateRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.VerificationResponse.FromString,
                _registered_method=True)
        self.SyncCertificateStore = channel.unary_unary(
                '/trust.TrustAnchor/SyncCertificateStore',
                request_serializer=trust__anchor__pb2.SyncRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.CheckExpiringCertificates = channel.unary_unary(
                '/trust.TrustAnchor/CheckExpiringCertificates',
                request_serializer=trust__anchor__pb2.ExpiryCheckRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.ExpiryCheckResponse.FromString,
                _registered_method=True)
        self.GetServiceStatus = channel.unary_unary(
                '/trust.TrustAnchor/GetServiceStatus',
                request_serializer=trust__anchor__pb2.StatusRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.ServiceStatusResponse.FromString,
                _registered_method=True)
        self.VerifyVDSNCSignature = channel.unary_unary(
                '/trust.TrustAnchor/VerifyVDSNCSignature',
                request_serializer=trust__anchor__pb2.VDSNCVerificationRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.VDSNCVerificationResponse.FromString,
                _registered_method=True)
        self.GetVDSNCKeys = channel.unary_unary(
                '/trust.TrustAnchor/GetVDSNCKeys',
                request_serializer=trust__anchor__pb2.GetVDSNCKeysRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.GetVDSNCKeysResponse.FromString,
                _registered_method=True)
        self.RegisterVDSNCKey = channel.unary_unary(
                '/trust.TrustAnchor/RegisterVDSNCKey',
                request_serializer=trust__anchor__pb2.RegisterVDSNCKeyRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.RegisterVDSNCKeyResponse.FromString,
                _registered_method=True)
        self.RevokeVDSNCKey = channel.unary_unary(
                '/trust.TrustAnchor/RevokeVDSNCKey',
                request_serializer=trust__anchor__pb2.RevokeVDSNCKeyRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.RevokeVDSNCKeyResponse.FromString,
                _registered_method=True)
        self.GetTrustStore = channel.unary_unary(
                '/trust.TrustAnchor/GetTrustStore',
                request_serializer=trust__anchor__pb2.GetTrustStoreRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.GetTrustStoreResponse.FromString,
                _registered_method=True)
        self.ApplyDataRetentionPolicy = channel.unary_unary(
                '/trust.TrustAnchor/ApplyDataRetentionPolicy',
                request_serializer=trust__anchor__pb2.DataRetentionPolicyRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.DataRetentionPolicyResponse.FromString,
                _registered_method=True)
        self.ValidateMinimalDataStorage = channel.unary_unary(
                '/trust.TrustAnchor/ValidateMinimalDataStorage',
                request_serializer=trust__anchor__pb2.MinimalDataValidationRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.MinimalDataValidationResponse.FromString,
                _registered_method=True)
        self.ManageElectronicRecord = channel.unary_unary(
                '/trust.TrustAnchor/ManageElectronicRecord',
                request_serializer=trust__anchor__pb2.ElectronicRecordRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.ElectronicRecordResponse.FromString,
                _registered_method=True)
        self.AuditDataAccess = channel.unary_unary(
                '/trust.TrustAnchor/AuditDataAccess',
                request_serializer=trust__anchor__pb2.DataAccessAuditRequest.SerializeToString,
                response_deserializer=trust__anchor__pb2.DataAccessAuditResponse.FromString,
                _registered_method=True)


class TrustAnchorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def VerifyTrust(self, request, context):
        """Existing method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMasterList(self, request, context):
        """OpenXPKI integration methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadMasterList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncCertificateStore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckExpiringCertificates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyVDSNCSignature(self, request, context):
        """VDS-NC key management methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVDSNCKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterVDSNCKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeVDSNCKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrustStore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyDataRetentionPolicy(self, request, context):
        """Annex 9 data retention and privacy methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateMinimalDataStorage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageElectronicRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuditDataAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrustAnchorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'VerifyTrust': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyTrust,
                    request_deserializer=trust__anchor__pb2.TrustRequest.FromString,
                    response_serializer=trust__anchor__pb2.TrustResponse.SerializeToString,
            ),
            'GetMasterList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMasterList,
                    request_deserializer=trust__anchor__pb2.GetMasterListRequest.FromString,
                    response_serializer=trust__anchor__pb2.MasterListResponse.SerializeToString,
            ),
            'UploadMasterList': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadMasterList,
                    request_deserializer=trust__anchor__pb2.UploadMasterListRequest.FromString,
                    response_serializer=trust__anchor__pb2.UploadMasterListResponse.SerializeToString,
            ),
            'VerifyCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCertificate,
                    request_deserializer=trust__anchor__pb2.VerifyCertificateRequest.FromString,
                    response_serializer=trust__anchor__pb2.VerificationResponse.SerializeToString,
            ),
            'SyncCertificateStore': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncCertificateStore,
                    request_deserializer=trust__anchor__pb2.SyncRequest.FromString,
                    response_serializer=trust__anchor__pb2.SyncResponse.SerializeToString,
            ),
            'CheckExpiringCertificates': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckExpiringCertificates,
                    request_deserializer=trust__anchor__pb2.ExpiryCheckRequest.FromString,
                    response_serializer=trust__anchor__pb2.ExpiryCheckResponse.SerializeToString,
            ),
            'GetServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceStatus,
                    request_deserializer=trust__anchor__pb2.StatusRequest.FromString,
                    response_serializer=trust__anchor__pb2.ServiceStatusResponse.SerializeToString,
            ),
            'VerifyVDSNCSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyVDSNCSignature,
                    request_deserializer=trust__anchor__pb2.VDSNCVerificationRequest.FromString,
                    response_serializer=trust__anchor__pb2.VDSNCVerificationResponse.SerializeToString,
            ),
            'GetVDSNCKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVDSNCKeys,
                    request_deserializer=trust__anchor__pb2.GetVDSNCKeysRequest.FromString,
                    response_serializer=trust__anchor__pb2.GetVDSNCKeysResponse.SerializeToString,
            ),
            'RegisterVDSNCKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterVDSNCKey,
                    request_deserializer=trust__anchor__pb2.RegisterVDSNCKeyRequest.FromString,
                    response_serializer=trust__anchor__pb2.RegisterVDSNCKeyResponse.SerializeToString,
            ),
            'RevokeVDSNCKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeVDSNCKey,
                    request_deserializer=trust__anchor__pb2.RevokeVDSNCKeyRequest.FromString,
                    response_serializer=trust__anchor__pb2.RevokeVDSNCKeyResponse.SerializeToString,
            ),
            'GetTrustStore': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrustStore,
                    request_deserializer=trust__anchor__pb2.GetTrustStoreRequest.FromString,
                    response_serializer=trust__anchor__pb2.GetTrustStoreResponse.SerializeToString,
            ),
            'ApplyDataRetentionPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyDataRetentionPolicy,
                    request_deserializer=trust__anchor__pb2.DataRetentionPolicyRequest.FromString,
                    response_serializer=trust__anchor__pb2.DataRetentionPolicyResponse.SerializeToString,
            ),
            'ValidateMinimalDataStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateMinimalDataStorage,
                    request_deserializer=trust__anchor__pb2.MinimalDataValidationRequest.FromString,
                    response_serializer=trust__anchor__pb2.MinimalDataValidationResponse.SerializeToString,
            ),
            'ManageElectronicRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageElectronicRecord,
                    request_deserializer=trust__anchor__pb2.ElectronicRecordRequest.FromString,
                    response_serializer=trust__anchor__pb2.ElectronicRecordResponse.SerializeToString,
            ),
            'AuditDataAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.AuditDataAccess,
                    request_deserializer=trust__anchor__pb2.DataAccessAuditRequest.FromString,
                    response_serializer=trust__anchor__pb2.DataAccessAuditResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trust.TrustAnchor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trust.TrustAnchor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrustAnchor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyTrust(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/VerifyTrust',
            trust__anchor__pb2.TrustRequest.SerializeToString,
            trust__anchor__pb2.TrustResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMasterList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/GetMasterList',
            trust__anchor__pb2.GetMasterListRequest.SerializeToString,
            trust__anchor__pb2.MasterListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadMasterList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/UploadMasterList',
            trust__anchor__pb2.UploadMasterListRequest.SerializeToString,
            trust__anchor__pb2.UploadMasterListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/VerifyCertificate',
            trust__anchor__pb2.VerifyCertificateRequest.SerializeToString,
            trust__anchor__pb2.VerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncCertificateStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/SyncCertificateStore',
            trust__anchor__pb2.SyncRequest.SerializeToString,
            trust__anchor__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckExpiringCertificates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/CheckExpiringCertificates',
            trust__anchor__pb2.ExpiryCheckRequest.SerializeToString,
            trust__anchor__pb2.ExpiryCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/GetServiceStatus',
            trust__anchor__pb2.StatusRequest.SerializeToString,
            trust__anchor__pb2.ServiceStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyVDSNCSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/VerifyVDSNCSignature',
            trust__anchor__pb2.VDSNCVerificationRequest.SerializeToString,
            trust__anchor__pb2.VDSNCVerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVDSNCKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/GetVDSNCKeys',
            trust__anchor__pb2.GetVDSNCKeysRequest.SerializeToString,
            trust__anchor__pb2.GetVDSNCKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterVDSNCKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/RegisterVDSNCKey',
            trust__anchor__pb2.RegisterVDSNCKeyRequest.SerializeToString,
            trust__anchor__pb2.RegisterVDSNCKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeVDSNCKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/RevokeVDSNCKey',
            trust__anchor__pb2.RevokeVDSNCKeyRequest.SerializeToString,
            trust__anchor__pb2.RevokeVDSNCKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrustStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/GetTrustStore',
            trust__anchor__pb2.GetTrustStoreRequest.SerializeToString,
            trust__anchor__pb2.GetTrustStoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyDataRetentionPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/ApplyDataRetentionPolicy',
            trust__anchor__pb2.DataRetentionPolicyRequest.SerializeToString,
            trust__anchor__pb2.DataRetentionPolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateMinimalDataStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/ValidateMinimalDataStorage',
            trust__anchor__pb2.MinimalDataValidationRequest.SerializeToString,
            trust__anchor__pb2.MinimalDataValidationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ManageElectronicRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/ManageElectronicRecord',
            trust__anchor__pb2.ElectronicRecordRequest.SerializeToString,
            trust__anchor__pb2.ElectronicRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuditDataAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trust.TrustAnchor/AuditDataAccess',
            trust__anchor__pb2.DataAccessAuditRequest.SerializeToString,
            trust__anchor__pb2.DataAccessAuditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
