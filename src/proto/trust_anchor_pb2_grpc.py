# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

from typing import NoReturn

import grpc

from . import trust_anchor_pb2 as trust__anchor__pb2

GRPC_GENERATED_VERSION = "1.75.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
         " but the generated code in trust_anchor_pb2_grpc.py depends on"
         f" grpcio>={GRPC_GENERATED_VERSION}."
         f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
         f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class TrustAnchorStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel) -> None:
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.VerifyTrust = channel.unary_unary(
            "/trust.TrustAnchor/VerifyTrust",
            request_serializer=trust__anchor__pb2.TrustRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.TrustResponse.FromString,
            _registered_method=True,
        )
        self.GetMasterList = channel.unary_unary(
            "/trust.TrustAnchor/GetMasterList",
            request_serializer=trust__anchor__pb2.GetMasterListRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.MasterListResponse.FromString,
            _registered_method=True,
        )
        self.UploadMasterList = channel.unary_unary(
            "/trust.TrustAnchor/UploadMasterList",
            request_serializer=trust__anchor__pb2.UploadMasterListRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.UploadMasterListResponse.FromString,
            _registered_method=True,
        )
        self.VerifyCertificate = channel.unary_unary(
            "/trust.TrustAnchor/VerifyCertificate",
            request_serializer=trust__anchor__pb2.VerifyCertificateRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.VerificationResponse.FromString,
            _registered_method=True,
        )
        self.SyncCertificateStore = channel.unary_unary(
            "/trust.TrustAnchor/SyncCertificateStore",
            request_serializer=trust__anchor__pb2.SyncRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.SyncResponse.FromString,
            _registered_method=True,
        )
        self.CheckExpiringCertificates = channel.unary_unary(
            "/trust.TrustAnchor/CheckExpiringCertificates",
            request_serializer=trust__anchor__pb2.ExpiryCheckRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.ExpiryCheckResponse.FromString,
            _registered_method=True,
        )
        self.GetServiceStatus = channel.unary_unary(
            "/trust.TrustAnchor/GetServiceStatus",
            request_serializer=trust__anchor__pb2.StatusRequest.SerializeToString,
            response_deserializer=trust__anchor__pb2.ServiceStatusResponse.FromString,
            _registered_method=True,
        )


class TrustAnchorServicer:
    """Missing associated documentation comment in .proto file."""

    def VerifyTrust(self, request, context) -> NoReturn:
        """Existing method"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def GetMasterList(self, request, context) -> NoReturn:
        """OpenXPKI integration methods"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def UploadMasterList(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def VerifyCertificate(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def SyncCertificateStore(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def CheckExpiringCertificates(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)

    def GetServiceStatus(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)


def add_TrustAnchorServicer_to_server(servicer, server) -> None:
    rpc_method_handlers = {
        "VerifyTrust": grpc.unary_unary_rpc_method_handler(
            servicer.VerifyTrust,
            request_deserializer=trust__anchor__pb2.TrustRequest.FromString,
            response_serializer=trust__anchor__pb2.TrustResponse.SerializeToString,
        ),
        "GetMasterList": grpc.unary_unary_rpc_method_handler(
            servicer.GetMasterList,
            request_deserializer=trust__anchor__pb2.GetMasterListRequest.FromString,
            response_serializer=trust__anchor__pb2.MasterListResponse.SerializeToString,
        ),
        "UploadMasterList": grpc.unary_unary_rpc_method_handler(
            servicer.UploadMasterList,
            request_deserializer=trust__anchor__pb2.UploadMasterListRequest.FromString,
            response_serializer=trust__anchor__pb2.UploadMasterListResponse.SerializeToString,
        ),
        "VerifyCertificate": grpc.unary_unary_rpc_method_handler(
            servicer.VerifyCertificate,
            request_deserializer=trust__anchor__pb2.VerifyCertificateRequest.FromString,
            response_serializer=trust__anchor__pb2.VerificationResponse.SerializeToString,
        ),
        "SyncCertificateStore": grpc.unary_unary_rpc_method_handler(
            servicer.SyncCertificateStore,
            request_deserializer=trust__anchor__pb2.SyncRequest.FromString,
            response_serializer=trust__anchor__pb2.SyncResponse.SerializeToString,
        ),
        "CheckExpiringCertificates": grpc.unary_unary_rpc_method_handler(
            servicer.CheckExpiringCertificates,
            request_deserializer=trust__anchor__pb2.ExpiryCheckRequest.FromString,
            response_serializer=trust__anchor__pb2.ExpiryCheckResponse.SerializeToString,
        ),
        "GetServiceStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetServiceStatus,
            request_deserializer=trust__anchor__pb2.StatusRequest.FromString,
            response_serializer=trust__anchor__pb2.ServiceStatusResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("trust.TrustAnchor", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("trust.TrustAnchor", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class TrustAnchor:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def VerifyTrust(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/VerifyTrust",
            trust__anchor__pb2.TrustRequest.SerializeToString,
            trust__anchor__pb2.TrustResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetMasterList(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/GetMasterList",
            trust__anchor__pb2.GetMasterListRequest.SerializeToString,
            trust__anchor__pb2.MasterListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UploadMasterList(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/UploadMasterList",
            trust__anchor__pb2.UploadMasterListRequest.SerializeToString,
            trust__anchor__pb2.UploadMasterListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def VerifyCertificate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/VerifyCertificate",
            trust__anchor__pb2.VerifyCertificateRequest.SerializeToString,
            trust__anchor__pb2.VerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SyncCertificateStore(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/SyncCertificateStore",
            trust__anchor__pb2.SyncRequest.SerializeToString,
            trust__anchor__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CheckExpiringCertificates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/CheckExpiringCertificates",
            trust__anchor__pb2.ExpiryCheckRequest.SerializeToString,
            trust__anchor__pb2.ExpiryCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetServiceStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trust.TrustAnchor/GetServiceStatus",
            trust__anchor__pb2.StatusRequest.SerializeToString,
            trust__anchor__pb2.ServiceStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
