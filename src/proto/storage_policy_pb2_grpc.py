# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import storage_policy_pb2 as storage__policy__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in storage_policy_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StoragePolicyEngineStub(object):
    """Storage Policy Service for Annex 9 Compliance
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ValidateDataCompliance = channel.unary_unary(
                '/marty.storage.v1.StoragePolicyEngine/ValidateDataCompliance',
                request_serializer=storage__policy__pb2.DataComplianceRequest.SerializeToString,
                response_deserializer=storage__policy__pb2.DataComplianceResponse.FromString,
                _registered_method=True)
        self.ApplyStorageConstraints = channel.unary_unary(
                '/marty.storage.v1.StoragePolicyEngine/ApplyStorageConstraints',
                request_serializer=storage__policy__pb2.StorageConstraintRequest.SerializeToString,
                response_deserializer=storage__policy__pb2.StorageConstraintResponse.FromString,
                _registered_method=True)
        self.MaskSensitiveData = channel.unary_unary(
                '/marty.storage.v1.StoragePolicyEngine/MaskSensitiveData',
                request_serializer=storage__policy__pb2.DataMaskingRequest.SerializeToString,
                response_deserializer=storage__policy__pb2.DataMaskingResponse.FromString,
                _registered_method=True)
        self.AuditStoredData = channel.unary_unary(
                '/marty.storage.v1.StoragePolicyEngine/AuditStoredData',
                request_serializer=storage__policy__pb2.StorageAuditRequest.SerializeToString,
                response_deserializer=storage__policy__pb2.StorageAuditResponse.FromString,
                _registered_method=True)
        self.PurgeExpiredData = channel.unary_unary(
                '/marty.storage.v1.StoragePolicyEngine/PurgeExpiredData',
                request_serializer=storage__policy__pb2.DataPurgeRequest.SerializeToString,
                response_deserializer=storage__policy__pb2.DataPurgeResponse.FromString,
                _registered_method=True)


class StoragePolicyEngineServicer(object):
    """Storage Policy Service for Annex 9 Compliance
    """

    def ValidateDataCompliance(self, request, context):
        """Validate data against minimal storage requirements
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyStorageConstraints(self, request, context):
        """Apply storage constraints to data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaskSensitiveData(self, request, context):
        """Mask/redact sensitive data not required for verification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuditStoredData(self, request, context):
        """Audit stored data for compliance violations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PurgeExpiredData(self, request, context):
        """Purge data beyond retention periods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StoragePolicyEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ValidateDataCompliance': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateDataCompliance,
                    request_deserializer=storage__policy__pb2.DataComplianceRequest.FromString,
                    response_serializer=storage__policy__pb2.DataComplianceResponse.SerializeToString,
            ),
            'ApplyStorageConstraints': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyStorageConstraints,
                    request_deserializer=storage__policy__pb2.StorageConstraintRequest.FromString,
                    response_serializer=storage__policy__pb2.StorageConstraintResponse.SerializeToString,
            ),
            'MaskSensitiveData': grpc.unary_unary_rpc_method_handler(
                    servicer.MaskSensitiveData,
                    request_deserializer=storage__policy__pb2.DataMaskingRequest.FromString,
                    response_serializer=storage__policy__pb2.DataMaskingResponse.SerializeToString,
            ),
            'AuditStoredData': grpc.unary_unary_rpc_method_handler(
                    servicer.AuditStoredData,
                    request_deserializer=storage__policy__pb2.StorageAuditRequest.FromString,
                    response_serializer=storage__policy__pb2.StorageAuditResponse.SerializeToString,
            ),
            'PurgeExpiredData': grpc.unary_unary_rpc_method_handler(
                    servicer.PurgeExpiredData,
                    request_deserializer=storage__policy__pb2.DataPurgeRequest.FromString,
                    response_serializer=storage__policy__pb2.DataPurgeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'marty.storage.v1.StoragePolicyEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('marty.storage.v1.StoragePolicyEngine', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StoragePolicyEngine(object):
    """Storage Policy Service for Annex 9 Compliance
    """

    @staticmethod
    def ValidateDataCompliance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.storage.v1.StoragePolicyEngine/ValidateDataCompliance',
            storage__policy__pb2.DataComplianceRequest.SerializeToString,
            storage__policy__pb2.DataComplianceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyStorageConstraints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.storage.v1.StoragePolicyEngine/ApplyStorageConstraints',
            storage__policy__pb2.StorageConstraintRequest.SerializeToString,
            storage__policy__pb2.StorageConstraintResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MaskSensitiveData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.storage.v1.StoragePolicyEngine/MaskSensitiveData',
            storage__policy__pb2.DataMaskingRequest.SerializeToString,
            storage__policy__pb2.DataMaskingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuditStoredData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.storage.v1.StoragePolicyEngine/AuditStoredData',
            storage__policy__pb2.StorageAuditRequest.SerializeToString,
            storage__policy__pb2.StorageAuditResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PurgeExpiredData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.storage.v1.StoragePolicyEngine/PurgeExpiredData',
            storage__policy__pb2.DataPurgeRequest.SerializeToString,
            storage__policy__pb2.DataPurgeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
