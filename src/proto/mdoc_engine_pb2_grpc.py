# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from . import mdoc_engine_pb2 as mdoc__engine__pb2

GRPC_GENERATED_VERSION = "1.75.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in mdoc_engine_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class MDocEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMDoc = channel.unary_unary(
            "/mdoc.MDocEngine/CreateMDoc",
            request_serializer=mdoc__engine__pb2.CreateMDocRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.CreateMDocResponse.FromString,
            _registered_method=True,
        )
        self.GetMDoc = channel.unary_unary(
            "/mdoc.MDocEngine/GetMDoc",
            request_serializer=mdoc__engine__pb2.GetMDocRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.MDocResponse.FromString,
            _registered_method=True,
        )
        self.SignMDoc = channel.unary_unary(
            "/mdoc.MDocEngine/SignMDoc",
            request_serializer=mdoc__engine__pb2.SignMDocRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.SignMDocResponse.FromString,
            _registered_method=True,
        )
        self.GenerateMDocQRCode = channel.unary_unary(
            "/mdoc.MDocEngine/GenerateMDocQRCode",
            request_serializer=mdoc__engine__pb2.GenerateQRCodeRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.GenerateQRCodeResponse.FromString,
            _registered_method=True,
        )
        self.TransferMDocToDevice = channel.unary_unary(
            "/mdoc.MDocEngine/TransferMDocToDevice",
            request_serializer=mdoc__engine__pb2.TransferMDocRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.TransferMDocResponse.FromString,
            _registered_method=True,
        )
        self.VerifyMDoc = channel.unary_unary(
            "/mdoc.MDocEngine/VerifyMDoc",
            request_serializer=mdoc__engine__pb2.VerifyMDocRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.VerifyMDocResponse.FromString,
            _registered_method=True,
        )
        self.CreateDocumentTypeTemplate = channel.unary_unary(
            "/mdoc.MDocEngine/CreateDocumentTypeTemplate",
            request_serializer=mdoc__engine__pb2.CreateTemplateRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.CreateTemplateResponse.FromString,
            _registered_method=True,
        )
        self.GetDocumentTemplates = channel.unary_unary(
            "/mdoc.MDocEngine/GetDocumentTemplates",
            request_serializer=mdoc__engine__pb2.GetTemplatesRequest.SerializeToString,
            response_deserializer=mdoc__engine__pb2.GetTemplatesResponse.FromString,
            _registered_method=True,
        )


class MDocEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateMDoc(self, request, context):
        """Create a new mobile document"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMDoc(self, request, context):
        """Retrieve an mDoc by document ID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SignMDoc(self, request, context):
        """Sign an mDoc using Document Signer"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GenerateMDocQRCode(self, request, context):
        """Generate QR code for offline verification"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TransferMDocToDevice(self, request, context):
        """Transfer mDoc to device"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def VerifyMDoc(self, request, context):
        """Verify an mDoc"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateDocumentTypeTemplate(self, request, context):
        """Create document type template"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetDocumentTemplates(self, request, context):
        """Get available document type templates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MDocEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateMDoc": grpc.unary_unary_rpc_method_handler(
            servicer.CreateMDoc,
            request_deserializer=mdoc__engine__pb2.CreateMDocRequest.FromString,
            response_serializer=mdoc__engine__pb2.CreateMDocResponse.SerializeToString,
        ),
        "GetMDoc": grpc.unary_unary_rpc_method_handler(
            servicer.GetMDoc,
            request_deserializer=mdoc__engine__pb2.GetMDocRequest.FromString,
            response_serializer=mdoc__engine__pb2.MDocResponse.SerializeToString,
        ),
        "SignMDoc": grpc.unary_unary_rpc_method_handler(
            servicer.SignMDoc,
            request_deserializer=mdoc__engine__pb2.SignMDocRequest.FromString,
            response_serializer=mdoc__engine__pb2.SignMDocResponse.SerializeToString,
        ),
        "GenerateMDocQRCode": grpc.unary_unary_rpc_method_handler(
            servicer.GenerateMDocQRCode,
            request_deserializer=mdoc__engine__pb2.GenerateQRCodeRequest.FromString,
            response_serializer=mdoc__engine__pb2.GenerateQRCodeResponse.SerializeToString,
        ),
        "TransferMDocToDevice": grpc.unary_unary_rpc_method_handler(
            servicer.TransferMDocToDevice,
            request_deserializer=mdoc__engine__pb2.TransferMDocRequest.FromString,
            response_serializer=mdoc__engine__pb2.TransferMDocResponse.SerializeToString,
        ),
        "VerifyMDoc": grpc.unary_unary_rpc_method_handler(
            servicer.VerifyMDoc,
            request_deserializer=mdoc__engine__pb2.VerifyMDocRequest.FromString,
            response_serializer=mdoc__engine__pb2.VerifyMDocResponse.SerializeToString,
        ),
        "CreateDocumentTypeTemplate": grpc.unary_unary_rpc_method_handler(
            servicer.CreateDocumentTypeTemplate,
            request_deserializer=mdoc__engine__pb2.CreateTemplateRequest.FromString,
            response_serializer=mdoc__engine__pb2.CreateTemplateResponse.SerializeToString,
        ),
        "GetDocumentTemplates": grpc.unary_unary_rpc_method_handler(
            servicer.GetDocumentTemplates,
            request_deserializer=mdoc__engine__pb2.GetTemplatesRequest.FromString,
            response_serializer=mdoc__engine__pb2.GetTemplatesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("mdoc.MDocEngine", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("mdoc.MDocEngine", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class MDocEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateMDoc(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/CreateMDoc",
            mdoc__engine__pb2.CreateMDocRequest.SerializeToString,
            mdoc__engine__pb2.CreateMDocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetMDoc(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/GetMDoc",
            mdoc__engine__pb2.GetMDocRequest.SerializeToString,
            mdoc__engine__pb2.MDocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SignMDoc(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/SignMDoc",
            mdoc__engine__pb2.SignMDocRequest.SerializeToString,
            mdoc__engine__pb2.SignMDocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GenerateMDocQRCode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/GenerateMDocQRCode",
            mdoc__engine__pb2.GenerateQRCodeRequest.SerializeToString,
            mdoc__engine__pb2.GenerateQRCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def TransferMDocToDevice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/TransferMDocToDevice",
            mdoc__engine__pb2.TransferMDocRequest.SerializeToString,
            mdoc__engine__pb2.TransferMDocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def VerifyMDoc(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/VerifyMDoc",
            mdoc__engine__pb2.VerifyMDocRequest.SerializeToString,
            mdoc__engine__pb2.VerifyMDocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateDocumentTypeTemplate(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/CreateDocumentTypeTemplate",
            mdoc__engine__pb2.CreateTemplateRequest.SerializeToString,
            mdoc__engine__pb2.CreateTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetDocumentTemplates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mdoc.MDocEngine/GetDocumentTemplates",
            mdoc__engine__pb2.GetTemplatesRequest.SerializeToString,
            mdoc__engine__pb2.GetTemplatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
