# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

from typing import NoReturn

import grpc

from . import inspection_system_pb2 as inspection__system__pb2

GRPC_GENERATED_VERSION = "1.75.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
         " but the generated code in inspection_system_pb2_grpc.py depends on"
         f" grpcio>={GRPC_GENERATED_VERSION}."
         f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
         f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class InspectionSystemStub:
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel) -> None:
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Inspect = channel.unary_unary(
            "/inspection.InspectionSystem/Inspect",
            request_serializer=inspection__system__pb2.InspectRequest.SerializeToString,
            response_deserializer=inspection__system__pb2.InspectResponse.FromString,
            _registered_method=True,
        )


class InspectionSystemServicer:
    """Missing associated documentation comment in .proto file."""

    def Inspect(self, request, context) -> NoReturn:
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        msg = "Method not implemented!"
        raise NotImplementedError(msg)


def add_InspectionSystemServicer_to_server(servicer, server) -> None:
    rpc_method_handlers = {
        "Inspect": grpc.unary_unary_rpc_method_handler(
            servicer.Inspect,
            request_deserializer=inspection__system__pb2.InspectRequest.FromString,
            response_serializer=inspection__system__pb2.InspectResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "inspection.InspectionSystem", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("inspection.InspectionSystem", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class InspectionSystem:
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Inspect(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/inspection.InspectionSystem/Inspect",
            inspection__system__pb2.InspectRequest.SerializeToString,
            inspection__system__pb2.InspectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
