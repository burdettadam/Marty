# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import data_lifecycle_pb2 as data__lifecycle__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in data_lifecycle_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataLifecycleManagerStub(object):
    """Data Lifecycle Management Service for Annex 9 Compliance
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureRetentionPolicy = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/ConfigureRetentionPolicy',
                request_serializer=data__lifecycle__pb2.RetentionPolicyRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.RetentionPolicyResponse.FromString,
                _registered_method=True)
        self.ScheduleArchival = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/ScheduleArchival',
                request_serializer=data__lifecycle__pb2.ArchivalScheduleRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.ArchivalScheduleResponse.FromString,
                _registered_method=True)
        self.ArchiveData = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/ArchiveData',
                request_serializer=data__lifecycle__pb2.DataArchivalRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.DataArchivalResponse.FromString,
                _registered_method=True)
        self.ScheduleDeletion = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/ScheduleDeletion',
                request_serializer=data__lifecycle__pb2.DeletionScheduleRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.DeletionScheduleResponse.FromString,
                _registered_method=True)
        self.DeleteData = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/DeleteData',
                request_serializer=data__lifecycle__pb2.DataDeletionRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.DataDeletionResponse.FromString,
                _registered_method=True)
        self.MonitorRetentionCompliance = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/MonitorRetentionCompliance',
                request_serializer=data__lifecycle__pb2.RetentionMonitoringRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.RetentionMonitoringResponse.FromString,
                _registered_method=True)
        self.ExtendRetentionPeriod = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/ExtendRetentionPeriod',
                request_serializer=data__lifecycle__pb2.RetentionExtensionRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.RetentionExtensionResponse.FromString,
                _registered_method=True)
        self.PlaceLegalHold = channel.unary_unary(
                '/data_lifecycle.DataLifecycleManager/PlaceLegalHold',
                request_serializer=data__lifecycle__pb2.LegalHoldRequest.SerializeToString,
                response_deserializer=data__lifecycle__pb2.LegalHoldResponse.FromString,
                _registered_method=True)


class DataLifecycleManagerServicer(object):
    """Data Lifecycle Management Service for Annex 9 Compliance
    """

    def ConfigureRetentionPolicy(self, request, context):
        """Configure retention periods for different data types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleArchival(self, request, context):
        """Schedule automated archival processes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArchiveData(self, request, context):
        """Execute data archival
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleDeletion(self, request, context):
        """Schedule automated deletion processes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteData(self, request, context):
        """Execute data deletion (with approval workflow)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorRetentionCompliance(self, request, context):
        """Monitor retention compliance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtendRetentionPeriod(self, request, context):
        """Extend retention periods (exceptional cases)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaceLegalHold(self, request, context):
        """Retrieve data for legal holds or audits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataLifecycleManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureRetentionPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureRetentionPolicy,
                    request_deserializer=data__lifecycle__pb2.RetentionPolicyRequest.FromString,
                    response_serializer=data__lifecycle__pb2.RetentionPolicyResponse.SerializeToString,
            ),
            'ScheduleArchival': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleArchival,
                    request_deserializer=data__lifecycle__pb2.ArchivalScheduleRequest.FromString,
                    response_serializer=data__lifecycle__pb2.ArchivalScheduleResponse.SerializeToString,
            ),
            'ArchiveData': grpc.unary_unary_rpc_method_handler(
                    servicer.ArchiveData,
                    request_deserializer=data__lifecycle__pb2.DataArchivalRequest.FromString,
                    response_serializer=data__lifecycle__pb2.DataArchivalResponse.SerializeToString,
            ),
            'ScheduleDeletion': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleDeletion,
                    request_deserializer=data__lifecycle__pb2.DeletionScheduleRequest.FromString,
                    response_serializer=data__lifecycle__pb2.DeletionScheduleResponse.SerializeToString,
            ),
            'DeleteData': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteData,
                    request_deserializer=data__lifecycle__pb2.DataDeletionRequest.FromString,
                    response_serializer=data__lifecycle__pb2.DataDeletionResponse.SerializeToString,
            ),
            'MonitorRetentionCompliance': grpc.unary_unary_rpc_method_handler(
                    servicer.MonitorRetentionCompliance,
                    request_deserializer=data__lifecycle__pb2.RetentionMonitoringRequest.FromString,
                    response_serializer=data__lifecycle__pb2.RetentionMonitoringResponse.SerializeToString,
            ),
            'ExtendRetentionPeriod': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtendRetentionPeriod,
                    request_deserializer=data__lifecycle__pb2.RetentionExtensionRequest.FromString,
                    response_serializer=data__lifecycle__pb2.RetentionExtensionResponse.SerializeToString,
            ),
            'PlaceLegalHold': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceLegalHold,
                    request_deserializer=data__lifecycle__pb2.LegalHoldRequest.FromString,
                    response_serializer=data__lifecycle__pb2.LegalHoldResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'data_lifecycle.DataLifecycleManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('data_lifecycle.DataLifecycleManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataLifecycleManager(object):
    """Data Lifecycle Management Service for Annex 9 Compliance
    """

    @staticmethod
    def ConfigureRetentionPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/ConfigureRetentionPolicy',
            data__lifecycle__pb2.RetentionPolicyRequest.SerializeToString,
            data__lifecycle__pb2.RetentionPolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleArchival(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/ScheduleArchival',
            data__lifecycle__pb2.ArchivalScheduleRequest.SerializeToString,
            data__lifecycle__pb2.ArchivalScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ArchiveData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/ArchiveData',
            data__lifecycle__pb2.DataArchivalRequest.SerializeToString,
            data__lifecycle__pb2.DataArchivalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScheduleDeletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/ScheduleDeletion',
            data__lifecycle__pb2.DeletionScheduleRequest.SerializeToString,
            data__lifecycle__pb2.DeletionScheduleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/DeleteData',
            data__lifecycle__pb2.DataDeletionRequest.SerializeToString,
            data__lifecycle__pb2.DataDeletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MonitorRetentionCompliance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/MonitorRetentionCompliance',
            data__lifecycle__pb2.RetentionMonitoringRequest.SerializeToString,
            data__lifecycle__pb2.RetentionMonitoringResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtendRetentionPeriod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/ExtendRetentionPeriod',
            data__lifecycle__pb2.RetentionExtensionRequest.SerializeToString,
            data__lifecycle__pb2.RetentionExtensionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaceLegalHold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/data_lifecycle.DataLifecycleManager/PlaceLegalHold',
            data__lifecycle__pb2.LegalHoldRequest.SerializeToString,
            data__lifecycle__pb2.LegalHoldResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
