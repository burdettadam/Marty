# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import dtc_engine_pb2 as dtc__engine__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dtc_engine_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DTCEngineStub(object):
    """Digital Travel Credential (DTC) Engine Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDTC = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/CreateDTC',
                request_serializer=dtc__engine__pb2.CreateDTCRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.CreateDTCResponse.FromString,
                _registered_method=True)
        self.GetDTC = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/GetDTC',
                request_serializer=dtc__engine__pb2.GetDTCRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.DTCResponse.FromString,
                _registered_method=True)
        self.SignDTC = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/SignDTC',
                request_serializer=dtc__engine__pb2.SignDTCRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.SignDTCResponse.FromString,
                _registered_method=True)
        self.RevokeDTC = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/RevokeDTC',
                request_serializer=dtc__engine__pb2.RevokeDTCRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.RevokeDTCResponse.FromString,
                _registered_method=True)
        self.GenerateDTCQRCode = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/GenerateDTCQRCode',
                request_serializer=dtc__engine__pb2.GenerateDTCQRCodeRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.GenerateDTCQRCodeResponse.FromString,
                _registered_method=True)
        self.TransferDTCToDevice = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/TransferDTCToDevice',
                request_serializer=dtc__engine__pb2.TransferDTCToDeviceRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.TransferDTCToDeviceResponse.FromString,
                _registered_method=True)
        self.VerifyDTC = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/VerifyDTC',
                request_serializer=dtc__engine__pb2.VerifyDTCRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.VerifyDTCResponse.FromString,
                _registered_method=True)
        self.LinkDTCToPassport = channel.unary_unary(
                '/marty.dtc.v1.DTCEngine/LinkDTCToPassport',
                request_serializer=dtc__engine__pb2.LinkDTCToPassportRequest.SerializeToString,
                response_deserializer=dtc__engine__pb2.LinkDTCToPassportResponse.FromString,
                _registered_method=True)


class DTCEngineServicer(object):
    """Digital Travel Credential (DTC) Engine Service
    """

    def CreateDTC(self, request, context):
        """Create a new Digital Travel Credential from passport data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDTC(self, request, context):
        """Get an existing DTC by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignDTC(self, request, context):
        """Sign a DTC using the Document Signer service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeDTC(self, request, context):
        """Revoke a DTC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateDTCQRCode(self, request, context):
        """Generate QR code for offline verification of a DTC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferDTCToDevice(self, request, context):
        """Transfer a DTC to a mobile device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyDTC(self, request, context):
        """Verify a DTC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkDTCToPassport(self, request, context):
        """Link a DTC to a physical passport
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DTCEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDTC': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDTC,
                    request_deserializer=dtc__engine__pb2.CreateDTCRequest.FromString,
                    response_serializer=dtc__engine__pb2.CreateDTCResponse.SerializeToString,
            ),
            'GetDTC': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDTC,
                    request_deserializer=dtc__engine__pb2.GetDTCRequest.FromString,
                    response_serializer=dtc__engine__pb2.DTCResponse.SerializeToString,
            ),
            'SignDTC': grpc.unary_unary_rpc_method_handler(
                    servicer.SignDTC,
                    request_deserializer=dtc__engine__pb2.SignDTCRequest.FromString,
                    response_serializer=dtc__engine__pb2.SignDTCResponse.SerializeToString,
            ),
            'RevokeDTC': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeDTC,
                    request_deserializer=dtc__engine__pb2.RevokeDTCRequest.FromString,
                    response_serializer=dtc__engine__pb2.RevokeDTCResponse.SerializeToString,
            ),
            'GenerateDTCQRCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateDTCQRCode,
                    request_deserializer=dtc__engine__pb2.GenerateDTCQRCodeRequest.FromString,
                    response_serializer=dtc__engine__pb2.GenerateDTCQRCodeResponse.SerializeToString,
            ),
            'TransferDTCToDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferDTCToDevice,
                    request_deserializer=dtc__engine__pb2.TransferDTCToDeviceRequest.FromString,
                    response_serializer=dtc__engine__pb2.TransferDTCToDeviceResponse.SerializeToString,
            ),
            'VerifyDTC': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyDTC,
                    request_deserializer=dtc__engine__pb2.VerifyDTCRequest.FromString,
                    response_serializer=dtc__engine__pb2.VerifyDTCResponse.SerializeToString,
            ),
            'LinkDTCToPassport': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkDTCToPassport,
                    request_deserializer=dtc__engine__pb2.LinkDTCToPassportRequest.FromString,
                    response_serializer=dtc__engine__pb2.LinkDTCToPassportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'marty.dtc.v1.DTCEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('marty.dtc.v1.DTCEngine', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DTCEngine(object):
    """Digital Travel Credential (DTC) Engine Service
    """

    @staticmethod
    def CreateDTC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/CreateDTC',
            dtc__engine__pb2.CreateDTCRequest.SerializeToString,
            dtc__engine__pb2.CreateDTCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDTC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/GetDTC',
            dtc__engine__pb2.GetDTCRequest.SerializeToString,
            dtc__engine__pb2.DTCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignDTC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/SignDTC',
            dtc__engine__pb2.SignDTCRequest.SerializeToString,
            dtc__engine__pb2.SignDTCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RevokeDTC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/RevokeDTC',
            dtc__engine__pb2.RevokeDTCRequest.SerializeToString,
            dtc__engine__pb2.RevokeDTCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateDTCQRCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/GenerateDTCQRCode',
            dtc__engine__pb2.GenerateDTCQRCodeRequest.SerializeToString,
            dtc__engine__pb2.GenerateDTCQRCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferDTCToDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/TransferDTCToDevice',
            dtc__engine__pb2.TransferDTCToDeviceRequest.SerializeToString,
            dtc__engine__pb2.TransferDTCToDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyDTC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/VerifyDTC',
            dtc__engine__pb2.VerifyDTCRequest.SerializeToString,
            dtc__engine__pb2.VerifyDTCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LinkDTCToPassport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.dtc.v1.DTCEngine/LinkDTCToPassport',
            dtc__engine__pb2.LinkDTCToPassportRequest.SerializeToString,
            dtc__engine__pb2.LinkDTCToPassportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
