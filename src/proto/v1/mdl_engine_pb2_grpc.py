# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import mdl_engine_pb2 as mdl__engine__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mdl_engine_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MDLEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMDL = channel.unary_unary(
                '/marty.mdl.v1.MDLEngine/CreateMDL',
                request_serializer=mdl__engine__pb2.CreateMDLRequest.SerializeToString,
                response_deserializer=mdl__engine__pb2.CreateMDLResponse.FromString,
                _registered_method=True)
        self.GetMDL = channel.unary_unary(
                '/marty.mdl.v1.MDLEngine/GetMDL',
                request_serializer=mdl__engine__pb2.GetMDLRequest.SerializeToString,
                response_deserializer=mdl__engine__pb2.MDLResponse.FromString,
                _registered_method=True)
        self.SignMDL = channel.unary_unary(
                '/marty.mdl.v1.MDLEngine/SignMDL',
                request_serializer=mdl__engine__pb2.SignMDLRequest.SerializeToString,
                response_deserializer=mdl__engine__pb2.SignMDLResponse.FromString,
                _registered_method=True)
        self.GenerateMDLQRCode = channel.unary_unary(
                '/marty.mdl.v1.MDLEngine/GenerateMDLQRCode',
                request_serializer=mdl__engine__pb2.GenerateQRCodeRequest.SerializeToString,
                response_deserializer=mdl__engine__pb2.GenerateQRCodeResponse.FromString,
                _registered_method=True)
        self.TransferMDLToDevice = channel.unary_unary(
                '/marty.mdl.v1.MDLEngine/TransferMDLToDevice',
                request_serializer=mdl__engine__pb2.TransferMDLRequest.SerializeToString,
                response_deserializer=mdl__engine__pb2.TransferMDLResponse.FromString,
                _registered_method=True)
        self.VerifyMDL = channel.unary_unary(
                '/marty.mdl.v1.MDLEngine/VerifyMDL',
                request_serializer=mdl__engine__pb2.VerifyMDLRequest.SerializeToString,
                response_deserializer=mdl__engine__pb2.VerifyMDLResponse.FromString,
                _registered_method=True)


class MDLEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateMDL(self, request, context):
        """Create a new mobile driving license
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMDL(self, request, context):
        """Retrieve an MDL by license number
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignMDL(self, request, context):
        """Sign an MDL using Document Signer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateMDLQRCode(self, request, context):
        """Generate QR code for offline verification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferMDLToDevice(self, request, context):
        """Transfer MDL to device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyMDL(self, request, context):
        """Verify an MDL (for inspection system integration)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MDLEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMDL': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMDL,
                    request_deserializer=mdl__engine__pb2.CreateMDLRequest.FromString,
                    response_serializer=mdl__engine__pb2.CreateMDLResponse.SerializeToString,
            ),
            'GetMDL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMDL,
                    request_deserializer=mdl__engine__pb2.GetMDLRequest.FromString,
                    response_serializer=mdl__engine__pb2.MDLResponse.SerializeToString,
            ),
            'SignMDL': grpc.unary_unary_rpc_method_handler(
                    servicer.SignMDL,
                    request_deserializer=mdl__engine__pb2.SignMDLRequest.FromString,
                    response_serializer=mdl__engine__pb2.SignMDLResponse.SerializeToString,
            ),
            'GenerateMDLQRCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateMDLQRCode,
                    request_deserializer=mdl__engine__pb2.GenerateQRCodeRequest.FromString,
                    response_serializer=mdl__engine__pb2.GenerateQRCodeResponse.SerializeToString,
            ),
            'TransferMDLToDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferMDLToDevice,
                    request_deserializer=mdl__engine__pb2.TransferMDLRequest.FromString,
                    response_serializer=mdl__engine__pb2.TransferMDLResponse.SerializeToString,
            ),
            'VerifyMDL': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyMDL,
                    request_deserializer=mdl__engine__pb2.VerifyMDLRequest.FromString,
                    response_serializer=mdl__engine__pb2.VerifyMDLResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'marty.mdl.v1.MDLEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('marty.mdl.v1.MDLEngine', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MDLEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateMDL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.mdl.v1.MDLEngine/CreateMDL',
            mdl__engine__pb2.CreateMDLRequest.SerializeToString,
            mdl__engine__pb2.CreateMDLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMDL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.mdl.v1.MDLEngine/GetMDL',
            mdl__engine__pb2.GetMDLRequest.SerializeToString,
            mdl__engine__pb2.MDLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignMDL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.mdl.v1.MDLEngine/SignMDL',
            mdl__engine__pb2.SignMDLRequest.SerializeToString,
            mdl__engine__pb2.SignMDLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateMDLQRCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.mdl.v1.MDLEngine/GenerateMDLQRCode',
            mdl__engine__pb2.GenerateQRCodeRequest.SerializeToString,
            mdl__engine__pb2.GenerateQRCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferMDLToDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.mdl.v1.MDLEngine/TransferMDLToDevice',
            mdl__engine__pb2.TransferMDLRequest.SerializeToString,
            mdl__engine__pb2.TransferMDLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyMDL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/marty.mdl.v1.MDLEngine/VerifyMDL',
            mdl__engine__pb2.VerifyMDLRequest.SerializeToString,
            mdl__engine__pb2.VerifyMDLResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
