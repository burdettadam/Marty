# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import biometric_service_pb2 as biometric__service__pb2

GRPC_GENERATED_VERSION = '1.75.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in biometric_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BiometricProcessingServiceStub(object):
    """Biometric Processing Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessTemplate = channel.unary_unary(
                '/biometric.BiometricProcessingService/ProcessTemplate',
                request_serializer=biometric__service__pb2.ProcessTemplateRequest.SerializeToString,
                response_deserializer=biometric__service__pb2.ProcessTemplateResponse.FromString,
                _registered_method=True)
        self.ExtractFeatures = channel.unary_unary(
                '/biometric.BiometricProcessingService/ExtractFeatures',
                request_serializer=biometric__service__pb2.ExtractFeaturesRequest.SerializeToString,
                response_deserializer=biometric__service__pb2.ExtractFeaturesResponse.FromString,
                _registered_method=True)
        self.ValidateQuality = channel.unary_unary(
                '/biometric.BiometricProcessingService/ValidateQuality',
                request_serializer=biometric__service__pb2.ValidateQualityRequest.SerializeToString,
                response_deserializer=biometric__service__pb2.ValidateQualityResponse.FromString,
                _registered_method=True)
        self.MatchBiometrics = channel.unary_unary(
                '/biometric.BiometricProcessingService/MatchBiometrics',
                request_serializer=biometric__service__pb2.MatchBiometricsRequest.SerializeToString,
                response_deserializer=biometric__service__pb2.MatchBiometricsResponse.FromString,
                _registered_method=True)
        self.VerifyIdentity = channel.unary_unary(
                '/biometric.BiometricProcessingService/VerifyIdentity',
                request_serializer=biometric__service__pb2.VerifyIdentityRequest.SerializeToString,
                response_deserializer=biometric__service__pb2.VerifyIdentityResponse.FromString,
                _registered_method=True)
        self.BatchProcessTemplates = channel.unary_unary(
                '/biometric.BiometricProcessingService/BatchProcessTemplates',
                request_serializer=biometric__service__pb2.BatchProcessTemplatesRequest.SerializeToString,
                response_deserializer=biometric__service__pb2.BatchProcessTemplatesResponse.FromString,
                _registered_method=True)


class BiometricProcessingServiceServicer(object):
    """Biometric Processing Service
    """

    def ProcessTemplate(self, request, context):
        """Template processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtractFeatures(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateQuality(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MatchBiometrics(self, request, context):
        """Biometric matching
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyIdentity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchProcessTemplates(self, request, context):
        """Batch operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BiometricProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessTemplate': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessTemplate,
                    request_deserializer=biometric__service__pb2.ProcessTemplateRequest.FromString,
                    response_serializer=biometric__service__pb2.ProcessTemplateResponse.SerializeToString,
            ),
            'ExtractFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtractFeatures,
                    request_deserializer=biometric__service__pb2.ExtractFeaturesRequest.FromString,
                    response_serializer=biometric__service__pb2.ExtractFeaturesResponse.SerializeToString,
            ),
            'ValidateQuality': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateQuality,
                    request_deserializer=biometric__service__pb2.ValidateQualityRequest.FromString,
                    response_serializer=biometric__service__pb2.ValidateQualityResponse.SerializeToString,
            ),
            'MatchBiometrics': grpc.unary_unary_rpc_method_handler(
                    servicer.MatchBiometrics,
                    request_deserializer=biometric__service__pb2.MatchBiometricsRequest.FromString,
                    response_serializer=biometric__service__pb2.MatchBiometricsResponse.SerializeToString,
            ),
            'VerifyIdentity': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyIdentity,
                    request_deserializer=biometric__service__pb2.VerifyIdentityRequest.FromString,
                    response_serializer=biometric__service__pb2.VerifyIdentityResponse.SerializeToString,
            ),
            'BatchProcessTemplates': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchProcessTemplates,
                    request_deserializer=biometric__service__pb2.BatchProcessTemplatesRequest.FromString,
                    response_serializer=biometric__service__pb2.BatchProcessTemplatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'biometric.BiometricProcessingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('biometric.BiometricProcessingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BiometricProcessingService(object):
    """Biometric Processing Service
    """

    @staticmethod
    def ProcessTemplate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/biometric.BiometricProcessingService/ProcessTemplate',
            biometric__service__pb2.ProcessTemplateRequest.SerializeToString,
            biometric__service__pb2.ProcessTemplateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExtractFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/biometric.BiometricProcessingService/ExtractFeatures',
            biometric__service__pb2.ExtractFeaturesRequest.SerializeToString,
            biometric__service__pb2.ExtractFeaturesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateQuality(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/biometric.BiometricProcessingService/ValidateQuality',
            biometric__service__pb2.ValidateQualityRequest.SerializeToString,
            biometric__service__pb2.ValidateQualityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MatchBiometrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/biometric.BiometricProcessingService/MatchBiometrics',
            biometric__service__pb2.MatchBiometricsRequest.SerializeToString,
            biometric__service__pb2.MatchBiometricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyIdentity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/biometric.BiometricProcessingService/VerifyIdentity',
            biometric__service__pb2.VerifyIdentityRequest.SerializeToString,
            biometric__service__pb2.VerifyIdentityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchProcessTemplates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/biometric.BiometricProcessingService/BatchProcessTemplates',
            biometric__service__pb2.BatchProcessTemplatesRequest.SerializeToString,
            biometric__service__pb2.BatchProcessTemplatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
