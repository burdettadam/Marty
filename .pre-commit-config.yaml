# Pre-commit hooks for code quality and consistency
default_language_version:
  python: python3.10
  # Pin Node.js version to a stable LTS to avoid nodeenv attempting to fetch a non-existent version (saw 24.x 404)
  node: 20.16.0

repos:
  # Local hooks for Marty-specific checks
  - repo: local
    hooks:
      - id: compile-protos
        name: Compile Protocol Buffers
        entry: python -m src.compile_protos
        language: system
        files: \.proto$
        pass_filenames: false
        description: "Compiles .proto files to Python modules"

      - id: test-import-check
        name: Test Import Validation
        entry: bash -c 'cd src && python -c "import services.trust_anchor; print(\"✓ Import validation passed\")"'
        language: system
        files: ^src/services/.*\.py$
        pass_filenames: false

      - id: logging-validation
        name: Logging Configuration Validation
        entry: bash -c 'cd src && python -c "from marty_common.logging.structured_logging import setup_logging_for_service; setup_logging_for_service(\"test\"); print(\"✓ Logging validation passed\")"'
        language: system
        files: ^src/marty_common/logging/.*\.py$
        pass_filenames: false

  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
        types: [text]
      - id: end-of-file-fixer
        types: [text]
      - id: check-yaml
        types: [yaml]
      - id: check-json
        types: [json]
      - id: check-toml
        types: [toml]
      - id: check-merge-conflict
        types: [text]
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-docstring-first
        types: [python]
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: ['--fix=lf']
        types: [text]
      - id: debug-statements
        types: [python]
      - id: fix-byte-order-marker
        types: [text]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: Shell Script Linting
        args: [--severity=warning]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        name: Dockerfile Linting

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: Detect Secrets
        args: [--baseline, .secrets.baseline]
        exclude: package.lock.json

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint
        name: Markdown Linting
        args: [--fix]

  # Python code formatting with black
  - repo: https://github.com/psf/black
    rev: 24.8.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=100]
        types: [python]
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$
          )

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]
        types: [python]
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$
          )

  # Linting with ruff (faster alternative to flake8)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types: [python]
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$
          )
      - id: ruff-format
        types: [python]
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$
          )

  # Python syntax upgrading
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.17.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python Syntax
        args: [--py310-plus]
        types: [python]
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$
          )

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        additional_dependencies: [
          types-requests,
          types-PyYAML,
          sqlalchemy,
          pydantic,
          grpcio-stubs,
          structlog,
        ]
        args: [
          --config-file=pyproject.toml,
          --show-error-codes,
          --pretty,
          --color-output,
        ]
        types: [python]
        files: ^src/(services|marty_common)/.*\.py$
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$|
              ^tests/
          )

  # Security scanning with bandit
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        types: [python]
        exclude: |
          (?x)(
              ^tests/|
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$
          )

  # Code complexity analysis with xenon
  - repo: https://github.com/rubik/xenon
    rev: v0.9.1
    hooks:
      - id: xenon
        args: [--max-average=B, --max-modules=B, --max-absolute=B, src/]
        types: [python]
        exclude: |
          (?x)(
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$|
              ^tests/
          )

  # Documentation style checking
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        types: [python]
        exclude: |
          (?x)(
              ^tests/|
              ^src/proto/.*_pb2\.py$|
              ^src/proto/.*_pb2_grpc\.py$|
              ^migrations/
          )

  # Check for security vulnerabilities in dependencies
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: Safety Dependency Check
        files: pyproject.toml

  # Git commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.29.0
    hooks:
      - id: commitizen
        name: Commitizen Check
        stages: [commit-msg]

  # Documentation coverage
  - repo: https://github.com/econchick/interrogate
    rev: 1.7.0
    hooks:
      - id: interrogate
        name: Documentation Coverage Check
        args: [--quiet, --fail-under=50]
        files: ^src/(services|marty_common)/.*\.py$

  # Enhanced framework validation hooks for newer features
  - repo: local
    hooks:
      - id: validate-database-patterns
        name: Validate Database Abstraction Layer
        entry: python scripts/validation/validate_database_patterns.py
        language: system
        types: [python]
        files: ^(src/framework/database/|templates/.*-service/.*database|marty_chassis/.*database).*\.py$
        pass_filenames: false

      - id: validate-service-isolation
        name: Validate Service Isolation Patterns
        entry: python scripts/validation/validate_service_isolation.py
        language: system
        files: ^(src/|services/|templates/).*\.(py|go|js|ts)$
        pass_filenames: false

      - id: validate-template-syntax
        name: Validate Template Syntax and Consistency
        entry: python scripts/validation/validate_template_syntax.py
        language: system
        files: ^templates/.*\.(py|go|js|ts|yaml|yml|toml|json|j2|jinja|jinja2)$
        pass_filenames: false

      - id: validate-cli-functionality
        name: Validate CLI and Framework Integration
        entry: python scripts/validation/validate_cli_functionality.py
        language: system
        files: ^(marty_cli/|src/framework/generators/|scripts/).*\.py$
        pass_filenames: false

      - id: validate-dashboard-components
        name: Validate Dashboard and UI Components
        entry: python scripts/validation/validate_dashboard_components.py
        language: system
        files: ^(dashboard/|ui/|frontend/).*\.(py|js|ts|jsx|tsx|vue|html|css)$
        pass_filenames: false

# Configuration for pre-commit ci
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [mypy, xenon, python-safety-dependencies-check, commitizen, interrogate]  # Skip slow hooks in CI
  submodules: false
