"""
{{service_description}}

This is a FastAPI service generated from the Marty DRY service template.
It automatically uses all established DRY patterns:
- FastAPIServiceConfig for configuration
- Shared middleware and error handling
- Base Docker configuration  
- DRY testing patterns
"""

import uvicorn
from fastapi import FastAPI

from src.{{service_package}}.app.api.routes import router
from src.{{service_package}}.app.core.config import create_{{service_package}}_config
from src.{{service_package}}.app.core.middleware import setup_middleware
from src.{{service_package}}.app.core.error_handlers import setup_error_handlers


def create_app() -> FastAPI:
    """
    Create FastAPI application with DRY patterns.
    
    This automatically sets up:
    - Configuration from FastAPIServiceConfig
    - Standard middleware (CORS, logging, etc.)
    - Error handling patterns
    - OpenAPI documentation
    - Health check endpoints
    """
    # Create configuration using DRY patterns
    config = create_{{service_package}}_config()
    
    # Initialize FastAPI with configuration
    app = FastAPI(**config.get_fastapi_config())
    
    # Setup DRY patterns
    setup_middleware(app, config)
    setup_error_handlers(app)
    
    # Include API routes
    app.include_router(router, prefix="/api/v1")
    
    # Setup logging using DRY patterns
    config.setup_logging()
    
    return app


def main() -> None:
    """Run the FastAPI application."""
    app = create_app()
    config = create_{{service_package}}_config()
    
    # Run with uvicorn using DRY configuration
    uvicorn.run(
        app,
        host=config.host,
        port=config.http_port,
        log_level=config.log_level.lower(),
        reload=config.debug,
    )


if __name__ == "__main__":
    main()