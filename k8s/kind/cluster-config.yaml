# Kind cluster configuration for Marty MMF plugin development
# Optimized for local development and testing
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

# Cluster name for easy identification
name: marty-dev

# Node configuration for plugin testing
nodes:
  # Control plane node
  - role: control-plane
    image: kindest/node:v1.28.0
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "marty.dev/role=control-plane"
    # Port mappings for plugin services access
    extraPortMappings:
      # MMF Framework API
      - containerPort: 8080
        hostPort: 8080
        protocol: TCP
      # Plugin gRPC services
      - containerPort: 9090
        hostPort: 9090
        protocol: TCP
      # Plugin REST APIs
      - containerPort: 8090
        hostPort: 8090
        protocol: TCP
      # Observability - Prometheus
      - containerPort: 9091
        hostPort: 9091
        protocol: TCP
      # Observability - Grafana
      - containerPort: 3000
        hostPort: 3000
        protocol: TCP
      # Plugin health endpoints
      - containerPort: 8081
        hostPort: 8081
        protocol: TCP

  # Worker nodes for plugin deployment
  - role: worker
    image: kindest/node:v1.28.0
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "marty.dev/role=worker,marty.dev/plugin-enabled=true"

  - role: worker
    image: kindest/node:v1.28.0
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "marty.dev/role=worker,marty.dev/plugin-enabled=true"

# Networking configuration for plugin communication
networking:
  # Avoid conflicts with host networking
  apiServerAddress: "127.0.0.1"
  apiServerPort: 6443
  podSubnet: "10.244.0.0/16"
  serviceSubnet: "10.96.0.0/16"
  
# Feature gates for modern Kubernetes features
featureGates:
  # Enable features needed for plugin architecture
  "EphemeralContainers": true
  "ServerSideApply": true
  "CustomResourceValidationExpressions": true

# Container runtime configuration
containerdConfigPatches:
  - |-
    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = "/etc/containerd/certs.d"
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5001"]
      endpoint = ["http://localhost:5001"]

# Kubernetes version and runtime settings
kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        # Enable audit logging for security
        audit-log-path: /var/log/audit.log
        audit-policy-file: /etc/kubernetes/audit-policy.yaml
        # Plugin-specific feature gates
        feature-gates: "CustomResourceValidationExpressions=true"
    controllerManager:
      extraArgs:
        # Enable horizontal pod autoscaling for plugins
        horizontal-pod-autoscaler-use-rest-clients: "true"
    scheduler:
      extraArgs:
        # Enhanced scheduling for plugin workloads
        feature-gates: "PodTopologySpread=true"