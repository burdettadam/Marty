apiVersion: batch/v1
kind: Job
metadata:
  name: trust-svc-init
  namespace: marty
  labels:
    app: trust-svc
    component: init-job
spec:
  ttlSecondsAfterFinished: 3600  # Clean up after 1 hour
  template:
    metadata:
      labels:
        app: trust-svc
        component: init-job
    spec:
      serviceAccountName: trust-svc
      restartPolicy: OnFailure
      containers:
      - name: trust-svc-init
        image: marty/trust-svc:latest
        command: ["python", "-m", "src.trust_svc.dev_job"]
        args: ["--count", "1000", "--countries", "10", "--format", "json"]
        env:
        - name: ENV
          value: "production"
        - name: TRUST_DB_HOST
          value: "postgres"
        - name: TRUST_DB_PORT
          value: "5432"
        - name: TRUST_DB_NAME
          value: "martydb"
        - name: TRUST_DB_USER
          value: "martyuser"
        - name: TRUST_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trust-svc-secrets
              key: database-password
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: config
        configMap:
          name: trust-svc-config
      - name: data
        persistentVolumeClaim:
          claimName: trust-svc-data
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: trust-svc-refresh
  namespace: marty
  labels:
    app: trust-svc
    component: cron-job
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: trust-svc
            component: cron-job
        spec:
          serviceAccountName: trust-svc
          restartPolicy: OnFailure
          containers:
          - name: trust-svc-refresh
            image: marty/trust-svc:latest
            command: ["python", "-c"]
            args: 
            - |
              import asyncio
              import aiohttp
              async def refresh():
                  async with aiohttp.ClientSession() as session:
                      async with session.post('http://trust-svc:8080/api/v1/admin/refresh-crl') as resp:
                          print(f"CRL refresh: {resp.status}")
                      async with session.post('http://trust-svc:8080/api/v1/admin/snapshot') as resp:
                          print(f"Snapshot: {resp.status}")
              asyncio.run(refresh())
            env:
            - name: ENV
              value: "production"
            resources:
              requests:
                memory: "64Mi"
                cpu: "25m"
              limits:
                memory: "128Mi"
                cpu: "100m"