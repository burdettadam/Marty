# Microsoft Authenticator Demo Environment for Marty
# Demonstrates end-to-end credential issuance and verification with Microsoft Authenticator
# Usage: docker-compose -f docker/docker-compose.demo-microsoft.yml --env-file .env.microsoft up

version: '3.8'

networks:
  marty-microsoft-network:
    driver: bridge

volumes:
  microsoft_demo_postgres_data:
  microsoft_demo_minio_data:
  microsoft_demo_vault_data:
  traefik-certificates:
  # === Infrastructure Services ===
  
  # PostgreSQL with schemas for Microsoft demo
  postgres-microsoft:
    image: postgres:15
    container_name: marty-microsoft-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-martyuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-martypassword}
      POSTGRES_DB: ${POSTGRES_DB:-martydb}
      POSTGRES_MULTIPLE_DATABASES: "martydb,trust_db,credentials_db,audit_db"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - microsoft_demo_postgres_data:/var/lib/postgresql/data
      - ../scripts/init-demo-db.sql:/docker-entrypoint-initdb.d/init-demo-db.sql
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-martyuser} -d ${POSTGRES_DB:-martydb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage for credential storage
  minio-microsoft:
    image: minio/minio:latest
    container_name: marty-microsoft-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - microsoft_demo_minio_data:/data
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # HashiCorp Vault for secrets management
  vault-microsoft:
    image: vault:1.13
    container_name: marty-microsoft-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-myroot}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "${VAULT_PORT:-8200}:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - microsoft_demo_vault_data:/vault/data
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Core Marty Services ===

  # Document Signer Service - Core credential issuance
  document-signer-microsoft:
    build:
      context: ..
      dockerfile: docker/document-signer.Dockerfile
    container_name: marty-microsoft-document-signer
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/${POSTGRES_DB:-martydb}
      - MINIO_ENDPOINT=minio-microsoft:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - VAULT_URL=http://vault-microsoft:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN:-myroot}
      - GRPC_PORT=50051
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SIGNING_KEY_ID=microsoft-demo-key
      - ISSUER_DID=did:web:issuer.marty.local
    ports:
      - "50051:50051"
    depends_on:
      postgres-microsoft:
        condition: service_healthy
      minio-microsoft:
        condition: service_healthy
      vault-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inspection System - Credential verification
  inspection-system-microsoft:
    build:
      context: ..
      dockerfile: docker/inspection-system.Dockerfile
    container_name: marty-microsoft-inspection-system
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/${POSTGRES_DB:-martydb}
      - MINIO_ENDPOINT=minio-microsoft:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - VAULT_URL=http://vault-microsoft:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN:-myroot}
      - GRPC_PORT=50052
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TRUST_ANCHOR_ENDPOINT=trust-anchor-microsoft:50053
    ports:
      - "50052:50052"
    depends_on:
      postgres-microsoft:
        condition: service_healthy
      minio-microsoft:
        condition: service_healthy
      vault-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50052"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trust Anchor - PKI trust management
  trust-anchor-microsoft:
    build:
      context: ..
      dockerfile: docker/trust-anchor.Dockerfile
    container_name: marty-microsoft-trust-anchor
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/trust_db
      - MINIO_ENDPOINT=minio-microsoft:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - VAULT_URL=http://vault-microsoft:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN:-myroot}
      - GRPC_PORT=50053
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PKD_ENDPOINT=https://pkddownloadsg.icao.int
    ports:
      - "50053:50053"
    depends_on:
      postgres-microsoft:
        condition: service_healthy
      minio-microsoft:
        condition: service_healthy
      vault-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50053"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Microsoft Authenticator Compatible APIs ===

  # OID4VCI Issuer API - Microsoft Authenticator credential issuance
  issuer-api-microsoft:
    build:
      context: ..
      dockerfile: docker/service.Dockerfile
      args:
        SERVICE_NAME: issuer_api
    container_name: marty-microsoft-issuer-api
    environment:
      - DOCUMENT_SIGNER_ENDPOINT=document-signer-microsoft:50051
      - ISSUER_BASE_URL=https://issuer.marty.local
      - CREDENTIAL_ISSUER_DID=did:web:issuer.marty.local
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=https://issuer.marty.local,https://verifier.marty.local
    ports:
      - "8000:8000"
    depends_on:
      document-signer-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.issuer-api.rule=Host(`issuer.marty.local`)"
      - "traefik.http.routers.issuer-api.tls=true"
      - "traefik.http.services.issuer-api.loadbalancer.server.port=8000"

  # OID4VP Verifier API - Microsoft Authenticator credential verification
  verifier-api-microsoft:
    build:
      context: ..
      dockerfile: docker/service.Dockerfile
      args:
        SERVICE_NAME: verifier_api
    container_name: marty-microsoft-verifier-api
    environment:
      - INSPECTION_SYSTEM_ENDPOINT=inspection-system-microsoft:50052
      - VERIFIER_BASE_URL=https://verifier.marty.local
      - VERIFIER_DID=did:web:verifier.marty.local
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=https://issuer.marty.local,https://verifier.marty.local
    ports:
      - "8001:8001"
    depends_on:
      inspection-system-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.verifier-api.rule=Host(`verifier.marty.local`)"
      - "traefik.http.routers.verifier-api.tls=true"
      - "traefik.http.services.verifier-api.loadbalancer.server.port=8001"

  # === Reverse Proxy for HTTPS (Required for Microsoft Authenticator) ===

  # Traefik reverse proxy with automatic HTTPS
  traefik-microsoft:
    image: traefik:v3.0
    container_name: marty-microsoft-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@marty.local}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=${ACME_CA_SERVER:-https://acme-staging-v02.api.letsencrypt.org/directory}"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    networks:
      - marty-microsoft-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.marty.local`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # === Demo Utilities ===

  # Demo initialization service
  demo-init-microsoft:
    build:
      context: ..
      dockerfile: docker/scripts/demo-init.Dockerfile
    container_name: marty-microsoft-demo-init
    environment:
      - ISSUER_API_URL=http://issuer-api-microsoft:8000
      - VERIFIER_API_URL=http://verifier-api-microsoft:8001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-martyuser}:${POSTGRES_PASSWORD:-martypassword}@postgres-microsoft:5432/${POSTGRES_DB:-martydb}
    depends_on:
      issuer-api-microsoft:
        condition: service_healthy
      verifier-api-microsoft:
        condition: service_healthy
    networks:
      - marty-microsoft-network
    volumes:
      - ../data:/app/data:ro
    command: ["python", "/app/scripts/init-microsoft-demo.py"]

volumes:
  traefik-certificates:

# Environment variables for Microsoft Authenticator demo
# Create .env.microsoft file with these variables:
#
# # Database Configuration
# POSTGRES_USER=martyuser
# POSTGRES_PASSWORD=martypassword
# POSTGRES_DB=martydb
# POSTGRES_PORT=5433
#
# # MinIO Configuration
# MINIO_ROOT_USER=minioadmin
# MINIO_ROOT_PASSWORD=minioadmin123
# MINIO_PORT=9000
# MINIO_CONSOLE_PORT=9001
#
# # Vault Configuration
# VAULT_ROOT_TOKEN=myroot
# VAULT_PORT=8200
#
# # HTTPS/TLS Configuration
# ACME_EMAIL=admin@marty.local
# ACME_CA_SERVER=https://acme-staging-v02.api.letsencrypt.org/directory
#
# # Logging
# LOG_LEVEL=INFO