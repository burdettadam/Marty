input {
  # Beats input (from Filebeat)
  beats {
    port => 5044
  }
  
  # TCP input for applications
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # Syslog input
  syslog {
    port => 514
    codec => json
  }
}

filter {
  # Parse JSON logs
  if [message] {
    json {
      source => "message"
      target => "log_data"
    }
  }
  
  # Add Marty-specific fields
  mutate {
    add_field => {
      "platform" => "marty"
      "log_pipeline_version" => "1.0.0"
    }
  }
  
  # Parse timestamp
  if [log_data][timestamp] {
    date {
      match => [ "[log_data][timestamp]", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Extract service information
  if [log_data][service] {
    mutate {
      add_field => { "service_name" => "%{[log_data][service]}" }
    }
  }
  
  # Extract environment
  if [log_data][environment] {
    mutate {
      add_field => { "env" => "%{[log_data][environment]}" }
    }
  }
  
  # Extract log level
  if [log_data][level] {
    mutate {
      add_field => { "log_level" => "%{[log_data][level]}" }
    }
  }
  
  # Extract request context
  if [log_data][request_id] {
    mutate {
      add_field => { 
        "request_id" => "%{[log_data][request_id]}"
        "user_id" => "%{[log_data][user_id]}"
        "session_id" => "%{[log_data][session_id]}"
        "correlation_id" => "%{[log_data][correlation_id]}"
      }
    }
  }
  
  # Handle performance metrics
  if [log_data][event] == "http_request" {
    mutate {
      add_field => {
        "metric_type" => "performance"
        "metric_category" => "http_request"
      }
    }
    
    # Convert numeric fields
    if [log_data][response_time] {
      mutate {
        convert => { "[log_data][response_time]" => "float" }
      }
    }
    
    if [log_data][status_code] {
      mutate {
        convert => { "[log_data][status_code]" => "integer" }
      }
    }
  }
  
  # Handle security events
  if [log_data][event_type] == "security" {
    mutate {
      add_field => {
        "metric_type" => "security"
        "security_category" => "%{[log_data][event]}"
      }
    }
  }
  
  # Handle business events
  if [log_data][event_type] == "business" {
    mutate {
      add_field => {
        "metric_type" => "business"
        "business_category" => "%{[log_data][event]}"
      }
    }
  }
  
  # Add GeoIP for client IPs
  if [log_data][client_ip] and [log_data][client_ip] != "unknown" {
    geoip {
      source => "[log_data][client_ip]"
      target => "geoip"
    }
  }
  
  # Clean up fields
  mutate {
    remove_field => [ "message", "host", "agent", "input", "ecs" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "marty-logs-%{+YYYY.MM.dd}"
    
    # Use service-specific indices for better organization
    if [service_name] {
      index => "marty-%{service_name}-%{+YYYY.MM.dd}"
    }
    
    # Separate indices for different log types
    if [metric_type] == "performance" {
      index => "marty-performance-%{+YYYY.MM.dd}"
    }
    
    if [metric_type] == "security" {
      index => "marty-security-%{+YYYY.MM.dd}"
    }
    
    if [metric_type] == "business" {
      index => "marty-business-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}