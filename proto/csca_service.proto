syntax = "proto3";

package csca;

service CscaService {
  // Existing method
  rpc GetCscaData (CscaRequest) returns (CscaResponse);
  
  // Certificate lifecycle management methods
  rpc CreateCertificate (CreateCertificateRequest) returns (CreateCertificateResponse);
  rpc RenewCertificate (RenewCertificateRequest) returns (CreateCertificateResponse);
  rpc RevokeCertificate (RevokeCertificateRequest) returns (RevokeCertificateResponse);
  rpc GetCertificateStatus (CertificateStatusRequest) returns (CertificateStatusResponse);
  rpc ListCertificates (ListCertificatesRequest) returns (ListCertificatesResponse);
  rpc CheckExpiringCertificates (CheckExpiringCertificatesRequest) returns (ListCertificatesResponse);
}

// Existing messages
message CscaRequest {
  string id = 1;
}

message CscaResponse {
  string data = 1;
}

// New messages for certificate lifecycle management
message CreateCertificateRequest {
  string subject_name = 1;
  int32 validity_days = 2;
  string key_algorithm = 3;  // e.g., "RSA", "ECDSA"
  int32 key_size = 4;        // e.g., 2048, 4096 for RSA; 256, 384 for ECDSA
  map<string, string> extensions = 5;  // Optional X.509 extensions
}

message CreateCertificateResponse {
  string certificate_id = 1;
  string certificate_data = 2;  // PEM encoded certificate
  string status = 3;            // ISSUED, RENEWED, FAILED
  string error_message = 4;     // Present only if status is FAILED
}

message RenewCertificateRequest {
  string certificate_id = 1;
  int32 validity_days = 2;
  bool reuse_key = 3;          // Whether to reuse the existing key pair
}

message RevokeCertificateRequest {
  string certificate_id = 1;
  string reason = 2;           // e.g., "KEY_COMPROMISE", "SUPERSEDED", "CESSATION_OF_OPERATION"
}

message RevokeCertificateResponse {
  string certificate_id = 1;
  bool success = 2;
  string status = 3;           // REVOKED, FAILED
  string error_message = 4;    // Present only if status is FAILED
}

message CertificateStatusRequest {
  string certificate_id = 1;
}

message CertificateStatusResponse {
  string certificate_id = 1;
  string status = 2;           // VALID, EXPIRED, REVOKED, NOT_FOUND
  string not_before = 3;       // Certificate validity start date (ISO format)
  string not_after = 4;        // Certificate expiry date (ISO format)
  string revocation_reason = 5; // Present only if status is REVOKED
  string subject = 6;          // Certificate subject
  string issuer = 7;           // Certificate issuer
}

message ListCertificatesRequest {
  string status_filter = 1;    // Optional: filter by status (VALID, EXPIRED, REVOKED)
  string subject_filter = 2;   // Optional: filter by subject (substring match)
}

message CertificateSummary {
  string certificate_id = 1;
  string subject = 2;
  string status = 3;           // VALID, EXPIRED, REVOKED 
  string not_before = 4;       // Certificate validity start date (ISO format)
  string not_after = 5;        // Certificate expiry date (ISO format)
  string revocation_reason = 6; // Present only if status is REVOKED
}

message ListCertificatesResponse {
  repeated CertificateSummary certificates = 1;
}

message CheckExpiringCertificatesRequest {
  int32 days_threshold = 1;    // Check certificates expiring in this many days
}