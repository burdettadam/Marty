syntax = "proto3";

package storage_policy;

// Storage Policy Service for Annex 9 Compliance
service StoragePolicyEngine {
  // Validate data against minimal storage requirements
  rpc ValidateDataCompliance (DataComplianceRequest) returns (DataComplianceResponse);
  
  // Apply storage constraints to data
  rpc ApplyStorageConstraints (StorageConstraintRequest) returns (StorageConstraintResponse);
  
  // Mask/redact sensitive data not required for verification
  rpc MaskSensitiveData (DataMaskingRequest) returns (DataMaskingResponse);
  
  // Audit stored data for compliance violations
  rpc AuditStoredData (StorageAuditRequest) returns (StorageAuditResponse);
  
  // Purge data beyond retention periods
  rpc PurgeExpiredData (DataPurgeRequest) returns (DataPurgeResponse);
}

// Data compliance validation request
message DataComplianceRequest {
  string entity_id = 1;
  string entity_type = 2; // "CMC", "CSCA", "DSC", etc.
  repeated DataElement data_elements = 3;
  string purpose = 4; // "IDENTITY_VERIFICATION", "INTEGRITY_CHECK", etc.
}

message DataElement {
  string field_name = 1;
  string field_value = 2;
  DataCategory category = 3;
  bool is_encrypted = 4;
  string sensitivity_level = 5; // "PUBLIC", "SENSITIVE", "RESTRICTED", "CONFIDENTIAL"
}

enum DataCategory {
  // Allowed categories per Annex 9
  DOCUMENT_IDENTIFIER = 0;
  ESSENTIAL_BIOGRAPHIC = 1;
  ISSUANCE_DATE = 2;
  EXPIRY_DATE = 3;
  ARTIFACT_POINTER = 4;
  SIGNATURE_MATERIAL = 5;
  SOD_PAYLOAD = 6;
  VDS_PAYLOAD = 7;
  
  // Restricted categories (should not be stored)
  FULL_FACIAL_IMAGE = 8;
  FINGERPRINT_DATA = 9;
  IRIS_DATA = 10;
  PERSONAL_DETAILS_EXTENDED = 11;
  EMPLOYMENT_HISTORY = 12;
  FINANCIAL_INFORMATION = 13;
  FAMILY_INFORMATION = 14;
  CONTACT_INFORMATION = 15;
}

message DataComplianceResponse {
  bool is_compliant = 1;
  repeated ComplianceViolation violations = 2;
  repeated DataElement approved_elements = 3;
  repeated DataElement rejected_elements = 4;
  string compliance_level = 5; // "FULLY_COMPLIANT", "CONDITIONALLY_COMPLIANT", "NON_COMPLIANT"
  repeated string recommendations = 6;
}

message ComplianceViolation {
  string field_name = 1;
  string violation_type = 2; // "UNNECESSARY_DATA", "EXCESSIVE_DETAIL", "PROHIBITED_CATEGORY"
  string severity = 3; // "WARNING", "ERROR", "CRITICAL"
  string description = 4;
  string remediation_action = 5;
}

// Storage constraint application
message StorageConstraintRequest {
  string entity_id = 1;
  string entity_type = 2;
  repeated DataElement original_data = 3;
  StoragePolicy policy = 4;
  bool apply_immediately = 5;
}

message StoragePolicy {
  string policy_id = 1;
  string policy_name = 2;
  repeated DataCategory allowed_categories = 3;
  repeated DataRetentionRule retention_rules = 4;
  bool require_justification = 5;
  repeated string authorized_purposes = 6;
}

message DataRetentionRule {
  DataCategory category = 1;
  int32 retention_period_days = 2;
  bool auto_purge_enabled = 3;
  string archive_location = 4;
  bool requires_approval_for_extension = 5;
}

message StorageConstraintResponse {
  bool constraints_applied = 1;
  repeated DataElement constrained_data = 2;
  repeated DataElement removed_data = 3;
  ConstraintSummary summary = 4;
  repeated string errors = 5;
}

message ConstraintSummary {
  int32 original_field_count = 1;
  int32 retained_field_count = 2;
  int32 removed_field_count = 3;
  string space_saved_percentage = 4;
  repeated string applied_constraints = 5;
}

// Data masking for sensitive information
message DataMaskingRequest {
  string entity_id = 1;
  repeated DataElement data_elements = 2;
  MaskingPolicy masking_policy = 3;
  string requesting_authority = 4;
  string access_purpose = 5;
}

message MaskingPolicy {
  string policy_id = 1;
  repeated MaskingRule rules = 2;
  bool preserve_format = 3;
  string default_mask_character = 4;
}

message MaskingRule {
  DataCategory category = 1;
  string field_pattern = 2; // Regex pattern for field names
  MaskingType masking_type = 3;
  int32 reveal_characters = 4; // Number of characters to leave unmasked
  string custom_mask_value = 5;
}

enum MaskingType {
  FULL_MASK = 0;
  PARTIAL_MASK = 1;
  HASH_REPLACEMENT = 2;
  TOKENIZATION = 3;
  COMPLETE_REMOVAL = 4;
  FORMAT_PRESERVING = 5;
}

message DataMaskingResponse {
  bool masking_applied = 1;
  repeated DataElement masked_data = 2;
  MaskingSummary summary = 3;
  repeated string errors = 4;
}

message MaskingSummary {
  int32 total_fields_processed = 1;
  int32 fields_masked = 2;
  int32 fields_removed = 3;
  int32 fields_unchanged = 4;
  repeated string applied_masking_rules = 5;
}

// Storage audit for compliance
message StorageAuditRequest {
  string audit_scope = 1; // "ENTITY", "SYSTEM", "DEPARTMENT"
  string scope_identifier = 2;
  string audit_date_from = 3;
  string audit_date_to = 4;
  repeated string compliance_standards = 5; // "ANNEX_9", "GDPR", "CCPA", etc.
}

message StorageAuditResponse {
  bool audit_passed = 1;
  AuditSummary audit_summary = 2;
  repeated ComplianceViolation violations = 3;
  repeated AuditFinding findings = 4;
  repeated string recommendations = 5;
}

message AuditSummary {
  int32 total_entities_audited = 1;
  int32 compliant_entities = 2;
  int32 non_compliant_entities = 3;
  string overall_compliance_percentage = 4;
  repeated string critical_issues = 5;
}

message AuditFinding {
  string entity_id = 1;
  string finding_type = 2;
  string severity = 3;
  string description = 4;
  repeated string affected_data_categories = 5;
  string remediation_deadline = 6;
}

// Data purging for expired retention periods
message DataPurgeRequest {
  string purge_scope = 1; // "ENTITY", "CATEGORY", "EXPIRED_ALL"
  string scope_identifier = 2;
  string cutoff_date = 3;
  bool dry_run = 4; // Preview what would be purged without actually doing it
  string authorized_by = 5;
  string justification = 6;
}

message DataPurgeResponse {
  bool purge_executed = 1;
  PurgeSummary summary = 2;
  repeated PurgedEntity purged_entities = 3;
  repeated string errors = 4;
  string execution_timestamp = 5;
}

message PurgeSummary {
  int32 entities_evaluated = 1;
  int32 entities_purged = 2;
  int32 entities_archived = 3;
  int32 entities_retained = 4;
  string storage_space_freed = 5;
}

message PurgedEntity {
  string entity_id = 1;
  string entity_type = 2;
  string purge_date = 3;
  string reason = 4;
  bool archived_before_purge = 5;
  string archive_location = 6;
}