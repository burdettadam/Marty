syntax = "proto3";

package trust;

service TrustAnchor {
  // Existing method
  rpc VerifyTrust (TrustRequest) returns (TrustResponse);
  
  // OpenXPKI integration methods
  rpc GetMasterList (GetMasterListRequest) returns (MasterListResponse);
  rpc UploadMasterList (UploadMasterListRequest) returns (UploadMasterListResponse);
  rpc VerifyCertificate (VerifyCertificateRequest) returns (VerificationResponse);
  rpc SyncCertificateStore (SyncRequest) returns (SyncResponse);
  rpc CheckExpiringCertificates (ExpiryCheckRequest) returns (ExpiryCheckResponse);
  rpc GetServiceStatus (StatusRequest) returns (ServiceStatusResponse);
  
  // VDS-NC key management methods
  rpc VerifyVDSNCSignature (VDSNCVerificationRequest) returns (VDSNCVerificationResponse);
  rpc GetVDSNCKeys (GetVDSNCKeysRequest) returns (GetVDSNCKeysResponse);
  rpc RegisterVDSNCKey (RegisterVDSNCKeyRequest) returns (RegisterVDSNCKeyResponse);
  rpc RevokeVDSNCKey (RevokeVDSNCKeyRequest) returns (RevokeVDSNCKeyResponse);
  rpc GetTrustStore (GetTrustStoreRequest) returns (GetTrustStoreResponse);
  
  // Annex 9 data retention and privacy methods
  rpc ApplyDataRetentionPolicy (DataRetentionPolicyRequest) returns (DataRetentionPolicyResponse);
  rpc ValidateMinimalDataStorage (MinimalDataValidationRequest) returns (MinimalDataValidationResponse);
  rpc ManageElectronicRecord (ElectronicRecordRequest) returns (ElectronicRecordResponse);
  rpc AuditDataAccess (DataAccessAuditRequest) returns (DataAccessAuditResponse);
}

// Existing messages
message TrustRequest {
  string entity = 1;
}

message TrustResponse {
  bool is_trusted = 1;
}

// New messages for OpenXPKI integration
message GetMasterListRequest {
  string format = 1; // "PEM", "DER", or "JSON"
}

message MasterListResponse {
  bytes master_list_data = 1;
  string format = 2;
  int32 certificate_count = 3;
  bool is_valid = 4;
  string last_updated = 5;
}

message UploadMasterListRequest {
  bytes master_list_data = 1;
  string format = 2; // "PEM", "DER", or "JSON"
}

message UploadMasterListResponse {
  bool success = 1;
  int32 certificates_imported = 2;
  repeated string errors = 3;
  repeated CertificateInfo certificates = 4;
}

message CertificateInfo {
  string subject = 1;
  string issuer = 2;
  string serial_number = 3;
  string not_before = 4;
  string not_after = 5;
  string country_code = 6;
  string fingerprint = 7;
}

message VerifyCertificateRequest {
  bytes certificate = 1;
  string format = 2; // "PEM" or "DER"
  bool check_revocation = 3;
}

message VerificationResponse {
  bool is_valid = 1;
  string subject = 2;
  string issuer = 3;
  repeated string validation_errors = 4;
  bool is_trusted = 5;
  bool is_revoked = 6;
  string revocation_reason = 7;
}

message SyncRequest {
  bool force = 1;
}

message SyncResponse {
  bool success = 1;
  int32 certificates_synced = 2;
  string sync_timestamp = 3;
  repeated string errors = 4;
}

message ExpiryCheckRequest {
  int32 days = 1; // Check for certificates expiring within this many days
}

message ExpiryCheckResponse {
  repeated ExpiringCertificate expiring_certificates = 1;
}

message ExpiringCertificate {
  string subject = 1;
  string issuer = 2;
  string serial_number = 3;
  string not_after = 4;
  int32 days_remaining = 5;
  string country_code = 6;
}

message StatusRequest {
}

message ServiceStatusResponse {
  bool is_healthy = 1;
  ServiceStats stats = 2;
  string version = 3;
  string openxpki_status = 4;
}

message ServiceStats {
  int32 total_certificates = 1;
  int32 trusted_countries = 2;
  string last_sync_time = 3;
  int32 expiring_soon = 4;
}

// VDS-NC verification messages
message VDSNCVerificationRequest {
  string kid = 1; // Key identifier
  bytes message = 2; // Signed message
  bytes signature = 3; // Signature bytes
  string algorithm = 4; // Signature algorithm (e.g., "ES256")
}

message VDSNCVerificationResponse {
  bool is_valid = 1;
  string reason = 2;
  string security_level = 3;
  repeated string warnings = 4;
  VDSNCKeyInfo key_info = 5;
}

message VDSNCKeyInfo {
  string kid = 1;
  string issuer_country = 2;
  string role = 3;
  string status = 4;
  string not_before = 5;
  string not_after = 6;
  int32 rotation_generation = 7;
}

// VDS-NC key management messages
message GetVDSNCKeysRequest {
  string issuer_country = 1; // Optional filter by country
  string role = 2; // Optional filter by role
  bool include_deprecated = 3; // Include deprecated keys
}

message GetVDSNCKeysResponse {
  repeated VDSNCKey keys = 1;
  VDSNCKeysMetadata metadata = 2;
}

message VDSNCKey {
  string kid = 1;
  string public_key_jwk = 2; // JWK format
  string issuer_country = 3;
  string role = 4;
  string status = 5;
  string not_before = 6;
  string not_after = 7;
  int32 rotation_generation = 8;
  string algorithm = 9;
}

message VDSNCKeysMetadata {
  string last_updated = 1;
  string next_update = 2;
  int32 total_count = 3;
  string country_filter = 4;
  string role_filter = 5;
}

message RegisterVDSNCKeyRequest {
  string kid = 1;
  string public_key_jwk = 2;
  string issuer_country = 3;
  string role = 4;
  string not_before = 5;
  string not_after = 6;
  map<string, string> metadata = 7;
}

message RegisterVDSNCKeyResponse {
  bool success = 1;
  string kid = 2;
  repeated string errors = 3;
}

message RevokeVDSNCKeyRequest {
  string kid = 1;
  string reason = 2;
}

message RevokeVDSNCKeyResponse {
  bool success = 1;
  string revocation_timestamp = 2;
  repeated string errors = 3;
}

// Unified trust store messages
message GetTrustStoreRequest {
  string country_code = 1; // Optional filter by country
  bool include_csca = 2;
  bool include_dsc = 3;
  bool include_vds_nc = 4;
}

message GetTrustStoreResponse {
  repeated CertificateInfo csca_certificates = 1;
  repeated CertificateInfo dsc_certificates = 2;
  repeated VDSNCKey vds_nc_keys = 3;
  TrustStoreMetadata metadata = 4;
}

message TrustStoreMetadata {
  string country_code = 1;
  string last_updated = 2;
  string next_update = 3;
  int32 csca_count = 4;
  int32 dsc_count = 5;
  int32 vds_nc_count = 6;
  string format_version = 7;
}

// Annex 9 Data Retention and Privacy Messages

// Minimal data storage constraint types
enum MinimalDataType {
  DOCUMENT_IDENTIFIER = 0;
  ESSENTIAL_BIOGRAPHICS = 1;
  ISSUANCE_EXPIRY_DATES = 2;
  ARTIFACT_POINTER = 3;
  SIGNATURE_MATERIAL = 4;
  SOD_PAYLOAD = 5;
  VDS_PAYLOAD = 6;
}

// Data retention policy request
message DataRetentionPolicyRequest {
  string entity_id = 1; // CMC ID, certificate ID, etc.
  string entity_type = 2; // "CMC", "CSCA", "DSC", etc.
  repeated MinimalDataType allowed_data_types = 3;
  int32 retention_period_days = 4;
  string requesting_authority = 5;
  string justification = 6;
}

message DataRetentionPolicyResponse {
  bool success = 1;
  string policy_id = 2;
  repeated string errors = 3;
  string applied_at = 4;
  RetentionPolicyInfo policy_info = 5;
}

message RetentionPolicyInfo {
  string policy_id = 1;
  repeated MinimalDataType allowed_data_types = 2;
  int32 retention_period_days = 3;
  string expiry_date = 4;
  string applied_by_authority = 5;
  repeated string constrained_fields = 6; // Fields that were removed/masked
}

// Minimal data validation request
message MinimalDataValidationRequest {
  string entity_id = 1;
  string entity_type = 2;
  repeated DataField data_fields = 3;
}

message DataField {
  string field_name = 1;
  string field_value = 2;
  MinimalDataType data_type = 3;
  bool is_essential = 4; // Required for identity and integrity
}

message MinimalDataValidationResponse {
  bool is_compliant = 1;
  repeated string violations = 2;
  repeated DataField approved_fields = 3;
  repeated DataField rejected_fields = 4;
  string validation_timestamp = 5;
}

// Electronic record management for CMC issuance and revocations
message ElectronicRecordRequest {
  string operation = 1; // "CREATE", "READ", "UPDATE", "REVOKE", "AUDIT"
  string cmc_id = 2;
  ElectronicRecordData record_data = 3;
  string requesting_authority = 4;
  string access_purpose = 5;
}

message ElectronicRecordData {
  string record_id = 1;
  string cmc_id = 2;
  string issuer_authority = 3;
  CMCIssuanceStatus status = 4;
  string created_at = 5;
  string last_updated = 6;
  
  // Essential data only
  EssentialBiographics essential_data = 7;
  IssuanceMetadata issuance_metadata = 8;
  repeated string background_check_ids = 9;
  string digital_signature = 10;
  
  // Audit trail
  repeated AccessLogEntry access_log = 11;
}

enum CMCIssuanceStatus {
  PENDING = 0;
  ISSUED = 1;
  REVOKED = 2;
  SUSPENDED = 3;
  EXPIRED = 4;
}

message EssentialBiographics {
  string document_number = 1;
  string surname = 2;
  string given_names = 3;
  string nationality = 4;
  string date_of_birth = 5;
  string gender = 6;
}

message IssuanceMetadata {
  string issuing_country = 1;
  string date_of_issue = 2;
  string date_of_expiry = 3;
  string issuing_authority = 4;
  string artifact_pointer = 5; // Pointer to stored certificate/signature
}

message AccessLogEntry {
  string timestamp = 1;
  string accessing_authority = 2;
  string operation = 3;
  string purpose = 4;
  string user_id = 5;
  bool authorized = 6;
}

message ElectronicRecordResponse {
  bool success = 1;
  string record_id = 2;
  ElectronicRecordData record_data = 3;
  repeated string errors = 4;
  string operation_timestamp = 5;
}

// Data access audit request
message DataAccessAuditRequest {
  string entity_id = 1; // CMC ID, record ID, etc.
  string entity_type = 2;
  string time_range_start = 3;
  string time_range_end = 4;
  string requesting_authority = 5;
  repeated string access_types = 6; // "READ", "WRITE", "DELETE", etc.
}

message DataAccessAuditResponse {
  bool success = 1;
  repeated AuditLogEntry audit_entries = 2;
  AuditSummary summary = 3;
  repeated string errors = 4;
}

message AuditLogEntry {
  string timestamp = 1;
  string entity_id = 2;
  string entity_type = 3;
  string operation = 4;
  string accessing_authority = 5;
  string user_id = 6;
  string purpose = 7;
  bool authorized = 8;
  repeated string data_fields_accessed = 9;
  string ip_address = 10;
}

message AuditSummary {
  int32 total_access_attempts = 1;
  int32 authorized_accesses = 2;
  int32 unauthorized_attempts = 3;
  repeated string frequent_accessors = 4;
  string most_accessed_entity = 5;
  repeated string compliance_violations = 6;
}