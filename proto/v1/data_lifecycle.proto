syntax = "proto3";

package marty.lifecycle.v1;


// Data Lifecycle Management Service for Annex 9 Compliance
service DataLifecycleManager {
  // Configure retention periods for different data types
  rpc ConfigureRetentionPolicy (RetentionPolicyRequest) returns (RetentionPolicyResponse);

  // Schedule automated archival processes
  rpc ScheduleArchival (ArchivalScheduleRequest) returns (ArchivalScheduleResponse);

  // Execute data archival
  rpc ArchiveData (DataArchivalRequest) returns (DataArchivalResponse);

  // Schedule automated deletion processes
  rpc ScheduleDeletion (DeletionScheduleRequest) returns (DeletionScheduleResponse);

  // Execute data deletion (with approval workflow)
  rpc DeleteData (DataDeletionRequest) returns (DataDeletionResponse);

  // Monitor retention compliance
  rpc MonitorRetentionCompliance (RetentionMonitoringRequest) returns (RetentionMonitoringResponse);

  // Extend retention periods (exceptional cases)
  rpc ExtendRetentionPeriod (RetentionExtensionRequest) returns (RetentionExtensionResponse);

  // Retrieve data for legal holds or audits
  rpc PlaceLegalHold (LegalHoldRequest) returns (LegalHoldResponse);
}

// Retention policy configuration
message RetentionPolicyRequest {
  string policy_name = 1;
  string policy_description = 2;
  PolicyScope scope = 3;
  repeated RetentionRule rules = 4;
  string effective_date = 5;
  string created_by_authority = 6;
  bool apply_retroactively = 7;
}

message PolicyScope {
  repeated string entity_types = 1; // "CMC", "CSCA", "DSC", etc.
  repeated string issuing_countries = 2; // Country code filters
  repeated string data_categories = 3; // Data type filters
  string scope_description = 4;
}

message RetentionRule {
  string data_category = 1;
  int32 retention_period_days = 2;
  string retention_period_justification = 3;
  ArchivalPolicy archival_policy = 4;
  DeletionPolicy deletion_policy = 5;
  repeated string exceptions = 6; // Legal or regulatory exceptions
}

message ArchivalPolicy {
  bool enabled = 1;
  int32 archive_after_days = 2; // Days before archival
  string archive_location = 3; // Storage location
  string archive_format = 4; // Compression, encryption, etc.
  bool verify_integrity = 5;
  string archive_access_level = 6; // Who can access archived data
}

message DeletionPolicy {
  bool enabled = 1;
  int32 delete_after_days = 2; // Days before deletion
  bool require_approval = 3;
  repeated string approval_authorities = 4;
  int32 approval_timeout_days = 5;
  string deletion_method = 6; // "SECURE_WIPE", "CRYPTOGRAPHIC_ERASURE", etc.
  bool maintain_deletion_log = 7;
}

message RetentionPolicyResponse {
  bool success = 1;
  string policy_id = 2;
  string effective_date = 3;
  repeated string affected_entities = 4;
  repeated string warnings = 5;
  repeated string errors = 6;
}

// Archival scheduling
message ArchivalScheduleRequest {
  string schedule_name = 1;
  ScheduleType schedule_type = 2;
  ScheduleFrequency frequency = 3;
  repeated string data_categories = 4;
  ArchivalCriteria criteria = 5;
  string scheduled_by = 6;
}

enum ScheduleType {
  IMMEDIATE = 0;
  RECURRING = 1;
  DATE_BASED = 2;
  EVENT_TRIGGERED = 3;
}

enum ScheduleFrequency {
  DAILY = 0;
  WEEKLY = 1;
  MONTHLY = 2;
  QUARTERLY = 3;
  ANNUALLY = 4;
  ON_EXPIRY = 5;
  ON_DEMAND = 6;
}

message ArchivalCriteria {
  int32 age_threshold_days = 1;
  string expiry_date_threshold = 2;
  repeated string status_filters = 3; // "EXPIRED", "REVOKED", etc.
  int32 access_frequency_threshold = 4; // Archive if accessed < N times
  string last_access_threshold = 5; // Archive if not accessed since date
}

message ArchivalScheduleResponse {
  bool success = 1;
  string schedule_id = 2;
  string next_execution_time = 3;
  int32 estimated_entities_affected = 4;
  repeated string errors = 5;
}

// Data archival execution
message DataArchivalRequest {
  string schedule_id = 1; // Reference to scheduled archival or ad-hoc
  repeated string entity_ids = 2; // Specific entities to archive
  string archive_reason = 3;
  bool verify_before_archive = 4;
  string authorized_by = 5;
  bool force_archive = 6; // Override normal checks
}

message DataArchivalResponse {
  bool success = 1;
  ArchivalSummary summary = 2;
  repeated ArchivedEntity archived_entities = 3;
  repeated ArchivalError errors = 4;
  string execution_timestamp = 5;
  string archive_location = 6;
}

message ArchivalSummary {
  int32 entities_processed = 1;
  int32 entities_archived = 2;
  int32 entities_skipped = 3;
  int32 entities_failed = 4;
  string total_data_size_archived = 5;
  string compression_ratio = 6;
}

message ArchivedEntity {
  string entity_id = 1;
  string entity_type = 2;
  string original_location = 3;
  string archive_location = 4;
  string archive_timestamp = 5;
  string integrity_hash = 6;
  bool encrypted = 7;
}

message ArchivalError {
  string entity_id = 1;
  string error_type = 2;
  string error_message = 3;
  string remediation_suggestion = 4;
}

// Deletion scheduling
message DeletionScheduleRequest {
  string schedule_name = 1;
  ScheduleType schedule_type = 2;
  ScheduleFrequency frequency = 3;
  DeletionCriteria criteria = 4;
  ApprovalWorkflow approval_workflow = 5;
  string scheduled_by = 6;
}

message DeletionCriteria {
  int32 retention_period_exceeded_days = 1;
  string absolute_deletion_date = 2;
  repeated string legal_hold_exemptions = 3;
  bool require_archival_first = 4;
  repeated string mandatory_approvals = 5;
}

message ApprovalWorkflow {
  bool enabled = 1;
  repeated string required_approvers = 2;
  int32 approval_timeout_days = 3;
  string escalation_authority = 4;
  bool require_unanimous_approval = 5;
}

message DeletionScheduleResponse {
  bool success = 1;
  string schedule_id = 2;
  string pending_approval_from = 3;
  string next_execution_time = 4;
  int32 estimated_entities_affected = 5;
  repeated string errors = 6;
}

// Data deletion execution
message DataDeletionRequest {
  string schedule_id = 1;
  repeated string entity_ids = 2;
  string deletion_reason = 3;
  repeated ApprovalRecord approvals = 4;
  string authorized_by = 5;
  bool emergency_deletion = 6; // Skip some checks in emergencies
  string legal_basis = 7;
}

message ApprovalRecord {
  string approver_authority = 1;
  string approver_id = 2;
  string approval_timestamp = 3;
  string approval_reference = 4;
  string approval_conditions = 5;
}

message DataDeletionResponse {
  bool success = 1;
  DeletionSummary summary = 2;
  repeated DeletedEntity deleted_entities = 3;
  repeated DeletionError errors = 4;
  string execution_timestamp = 5;
  string deletion_certificate = 6; // Proof of deletion
}

message DeletionSummary {
  int32 entities_processed = 1;
  int32 entities_deleted = 2;
  int32 entities_skipped = 3;
  int32 entities_failed = 4;
  string total_data_size_deleted = 5;
  string deletion_method_used = 6;
}

message DeletedEntity {
  string entity_id = 1;
  string entity_type = 2;
  string deletion_timestamp = 3;
  string deletion_method = 4;
  string deletion_certificate_id = 5;
  bool secure_wipe_verified = 6;
}

message DeletionError {
  string entity_id = 1;
  string error_type = 2; // "LEGAL_HOLD", "APPROVAL_MISSING", "TECHNICAL_ERROR"
  string error_message = 3;
  string blocking_reason = 4;
}

// Retention compliance monitoring
message RetentionMonitoringRequest {
  string monitoring_scope = 1; // "SYSTEM", "DEPARTMENT", "ENTITY_TYPE"
  string scope_identifier = 2;
  string monitoring_period_start = 3;
  string monitoring_period_end = 4;
  bool include_predictions = 5; // Predict future compliance issues
}

message RetentionMonitoringResponse {
  bool overall_compliance = 1;
  ComplianceMetrics metrics = 2;
  repeated ComplianceViolation violations = 3;
  repeated UpcomingAction upcoming_actions = 4;
  repeated string recommendations = 5;
}

message ComplianceMetrics {
  int32 total_entities_monitored = 1;
  int32 compliant_entities = 2;
  int32 non_compliant_entities = 3;
  int32 entities_nearing_expiry = 4;
  string overall_compliance_percentage = 5;
  repeated CategoryCompliance category_breakdown = 6;
}

message CategoryCompliance {
  string data_category = 1;
  int32 total_entities = 2;
  int32 compliant_entities = 3;
  string compliance_percentage = 4;
  int32 overdue_for_archival = 5;
  int32 overdue_for_deletion = 6;
}

message ComplianceViolation {
  string entity_id = 1;
  string violation_type = 2;
  string severity = 3;
  string description = 4;
  string detected_date = 5;
  string required_action = 6;
  string deadline = 7;
}

message UpcomingAction {
  string action_type = 1; // "ARCHIVE", "DELETE", "REVIEW"
  string entity_id = 2;
  string scheduled_date = 3;
  string responsible_authority = 4;
  bool approval_required = 5;
  string notification_sent = 6;
}

// Retention period extension
message RetentionExtensionRequest {
  string entity_id = 1;
  string entity_type = 2;
  int32 extension_period_days = 3;
  string extension_reason = 4;
  string legal_basis = 5;
  string requested_by_authority = 6;
  repeated string supporting_documentation = 7;
}

message RetentionExtensionResponse {
  bool extension_granted = 1;
  string new_retention_expiry_date = 2;
  string extension_reference_id = 3;
  repeated string conditions = 4;
  string approved_by = 5;
  repeated string errors = 6;
}

// Legal hold management
message LegalHoldRequest {
  string hold_name = 1;
  string legal_case_reference = 2;
  string issuing_authority = 3;
  repeated string entity_ids = 4;
  string entity_query = 5; // Query to select entities
  string hold_reason = 6;
  string effective_date = 7;
  string expected_duration = 8;
}

message LegalHoldResponse {
  bool hold_placed = 1;
  string hold_id = 2;
  int32 entities_affected = 3;
  repeated string affected_entity_ids = 4;
  string hold_effective_date = 5;
  repeated string errors = 6;
  string compliance_officer_notified = 7;
}
