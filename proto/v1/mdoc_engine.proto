syntax = "proto3";

package marty.mdoc.v1;


import "common_services.proto";

service MDocEngine {
  // Create a new mobile document
  rpc CreateMDoc (CreateMDocRequest) returns (CreateMDocResponse);

  // Retrieve an mDoc by document ID
  rpc GetMDoc (GetMDocRequest) returns (MDocResponse);

  // Sign an mDoc using Document Signer
  rpc SignMDoc (SignMDocRequest) returns (SignMDocResponse);

  // Generate QR code for offline verification
  rpc GenerateMDocQRCode (GenerateQRCodeRequest) returns (GenerateQRCodeResponse);

  // Transfer mDoc to device
  rpc TransferMDocToDevice (TransferMDocRequest) returns (TransferMDocResponse);

  // Verify an mDoc
  rpc VerifyMDoc (VerifyMDocRequest) returns (VerifyMDocResponse);

  // Create document type template
  rpc CreateDocumentTypeTemplate (CreateTemplateRequest) returns (CreateTemplateResponse);

  // Get available document type templates
  rpc GetDocumentTemplates (GetTemplatesRequest) returns (GetTemplatesResponse);
}

// Request to create a new mDoc based on document type
message CreateMDocRequest {
  string user_id = 1; // Added user_id
  string document_type = 2; // e.g., "ID_CARD", "RESIDENCE_PERMIT", "BIRTH_CERTIFICATE"
  string template_id = 3;   // Optional, references a predefined template

  // Core document fields
  string document_number = 4;
  string issuing_authority = 5;
  string issue_date = 6; // ISO format: YYYY-MM-DD
  string expiry_date = 7; // ISO format: YYYY-MM-DD

  // Person information
  PersonInfo person_info = 8;

  // Document specific fields as key-value pairs
  repeated DocumentField document_fields = 9;

  // Document images (ID photo, signature, fingerprints, etc.)
  repeated DocumentImage images = 10;
}

// Person information
message PersonInfo {
  string first_name = 1;
  string last_name = 2;
  string date_of_birth = 3; // ISO format: YYYY-MM-DD
  string place_of_birth = 4;
  string nationality = 5;
  string gender = 6;

  // Optional additional person details
  repeated DocumentField additional_info = 7;
}

// Document field as key-value pair
message DocumentField {
  string field_name = 1;
  string field_value = 2;
  bool is_mandatory = 3;
  string namespace = 4; // For organizing fields into categories
}

// Document image (photo, signature, etc.)
message DocumentImage {
  string image_type = 1; // e.g., "PORTRAIT", "SIGNATURE", "FINGERPRINT"
  bytes image_data = 2;  // Binary image data
  string format = 3;     // e.g., "JPEG", "PNG"
}

// Response from creating an mDoc
message CreateMDocResponse {
  string mdoc_id = 1;
  string status = 2; // Consider enum
  marty.common.v1.ApiError error = 3;
}

// Request to get an mDoc
message GetMDocRequest {
  string mdoc_id = 1;
}

// Full mDoc data
message MDocResponse {
  string mdoc_id = 1;
  string document_type = 2;
  string document_number = 3;
  string issuing_authority = 4;
  string issue_date = 5;
  string expiry_date = 6;

  PersonInfo person_info = 7;
  repeated DocumentField document_fields = 8;
  repeated DocumentImage images = 9;

  SignatureInfo signature_info = 10;
  string status = 11; // Consider enum
  string error_message = 12;
  string created_at = 13;
}

// Signature information
message SignatureInfo {
  string signature_date = 1;
  string signer_id = 2;
  bytes signature = 3;
  bool is_valid = 4;
}

// Request to sign an mDoc
message SignMDocRequest {
  string mdoc_id = 1;
}

// Response from signing an mDoc
message SignMDocResponse {
  bool success = 1;
  SignatureInfo signature_info = 2;
  string error_message = 3;
}

// Request to generate QR code for offline verification
message GenerateQRCodeRequest {
  string mdoc_id = 1;
  repeated string namespaces_to_include = 2; // Empty means include all
  repeated string fields_to_include = 3;     // Empty means include all fields
}

// Response with QR code
message GenerateQRCodeResponse {
  bytes qr_code = 1;
  string error_message = 2;
}

// Request to transfer mDoc to device
message TransferMDocRequest {
  string mdoc_id = 1;
  string device_id = 2;
  string transfer_method = 3; // e.g., "BLE", "NFC", "ONLINE"
}

// Response from transferring mDoc
message TransferMDocResponse {
  bool success = 1;
  string transfer_id = 2;
  string error_message = 3;
}

// Request to verify an mDoc
message VerifyMDocRequest {
  oneof mdoc_data {
    string mdoc_id = 1;
    bytes qr_code_data = 2;
    bytes device_data = 3; // Data received from device via BLE/NFC
  }

  // Which fields the verifier is authorized to see
  repeated string requested_namespaces = 4;
  repeated string requested_fields = 5;

  string verification_level = 6; // "BASIC", "STANDARD", "ENHANCED"
}

// Response from verifying an mDoc
message VerifyMDocResponse {
  bool is_valid = 1;
  repeated VerificationResult verification_results = 2;
  MDocResponse mdoc_data = 3; // Only fields the verifier is authorized to see
  string error_message = 4;
}

// Individual verification result
message VerificationResult {
  string check_name = 1;
  bool passed = 2;
  string details = 3;
}

// Request to create a document type template
message CreateTemplateRequest {
  string template_name = 1;
  string document_type = 2;
  repeated DocumentField required_fields = 3;
  repeated DocumentField optional_fields = 4;
  repeated string required_images = 5; // Image types required for this document
}

// Response from creating a template
message CreateTemplateResponse {
  string template_id = 1;
  bool success = 2;
  string error_message = 3;
}

// Request to get available templates
message GetTemplatesRequest {
  string document_type = 1; // Optional filter by document type
}

// Response with available templates
message GetTemplatesResponse {
  repeated DocumentTemplate templates = 1;
}

// Document template information
message DocumentTemplate {
  string template_id = 1;
  string template_name = 2;
  string document_type = 3;
  repeated DocumentField required_fields = 4;
  repeated DocumentField optional_fields = 5;
  repeated string required_images = 6;
}
