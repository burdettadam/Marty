syntax = "proto3";

package marty.mdl.v1;


import "common_services.proto";

service MDLEngine {
  // Create a new mobile driving license
  rpc CreateMDL (CreateMDLRequest) returns (CreateMDLResponse);

  // Retrieve an MDL by license number
  rpc GetMDL (GetMDLRequest) returns (MDLResponse);

  // Sign an MDL using Document Signer
  rpc SignMDL (SignMDLRequest) returns (SignMDLResponse);

  // Generate QR code for offline verification
  rpc GenerateMDLQRCode (GenerateQRCodeRequest) returns (GenerateQRCodeResponse);

  // Transfer MDL to device
  rpc TransferMDLToDevice (TransferMDLRequest) returns (TransferMDLResponse);

  // Verify an MDL (for inspection system integration)
  rpc VerifyMDL (VerifyMDLRequest) returns (VerifyMDLResponse);
}

// Request to create a new MDL
message CreateMDLRequest {
  string user_id = 1; // Added user_id
  string license_number = 2;
  string first_name = 3;
  string last_name = 4;
  string date_of_birth = 5; // ISO format: YYYY-MM-DD
  string issuing_authority = 6;
  string issue_date = 7; // ISO format: YYYY-MM-DD
  string expiry_date = 8; // ISO format: YYYY-MM-DD
  bytes portrait = 9; // Photo in bytes
  repeated LicenseCategory license_categories = 10;
  repeated AdditionalField additional_fields = 11;
}

// License category (e.g., A, B, C, etc.)
message LicenseCategory {
  string category_code = 1;
  string issue_date = 2;
  string expiry_date = 3;
  repeated string restrictions = 4;
}

// Additional fields that may be required
message AdditionalField {
  string field_name = 1;
  string field_value = 2;
}

// Response from creating an MDL
message CreateMDLResponse {
  string mdl_id = 1;
  string status = 2; // Consider using an enum for status
  marty.common.v1.ApiError error = 3;
}

// Request to get an MDL
message GetMDLRequest {
  string license_number = 1;
}

// Full MDL data
message MDLResponse {
  string mdl_id = 1;
  string license_number = 2;
  string first_name = 3;
  string last_name = 4;
  string date_of_birth = 5;
  string issuing_authority = 6;
  string issue_date = 7;
  string expiry_date = 8;
  bytes portrait = 9;
  repeated LicenseCategory license_categories = 10;
  repeated AdditionalField additional_fields = 11;
  SignatureInfo signature_info = 12;
  string status = 13; // Consider using an enum for status
  marty.common.v1.ApiError error = 14;
}

// Signature information
message SignatureInfo {
  string signature_date = 1;
  string signer_id = 2;
  bytes signature = 3;
  bool is_valid = 4;
}

// Request to sign an MDL
message SignMDLRequest {
  string mdl_id = 1;
}

// Response from signing an MDL
message SignMDLResponse {
  bool success = 1;
  SignatureInfo signature_info = 2;
  marty.common.v1.ApiError error = 3;
}

// Request to generate QR code for offline verification
message GenerateQRCodeRequest {
  string mdl_id = 1;
  bool include_photo = 2;
  repeated string fields_to_include = 3; // Empty means include all fields
}

// Response with QR code
message GenerateQRCodeResponse {
  bytes qr_code = 1;
  marty.common.v1.ApiError error = 2;
}

// Request to transfer MDL to device
message TransferMDLRequest {
  string mdl_id = 1;
  string device_id = 2;
  string transfer_method = 3; // e.g., "BLE", "NFC", "ONLINE"
}

// Response from transferring MDL
message TransferMDLResponse {
  bool success = 1;
  string transfer_id = 2;
  marty.common.v1.ApiError error = 3;
}

// Request to verify an MDL
message VerifyMDLRequest {
  oneof mdl_data {
    string mdl_id = 1;
    bytes qr_code_data = 2;
    bytes device_data = 3; // Data received from device via BLE/NFC
  }
  string verification_level = 4; // "BASIC", "STANDARD", "ENHANCED"
}

// Response from verifying an MDL
message VerifyMDLResponse {
  bool is_valid = 1;
  repeated VerificationResult verification_results = 2;
  MDLResponse mdl_data = 3; // Only fields the verifier is authorized to see
  marty.common.v1.ApiError error = 4;
}

// Individual verification result
message VerificationResult {
  string check_name = 1;
  bool passed = 2;
  string details = 3;
}
