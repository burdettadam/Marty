

syntax = "proto3";
package marty.common.v1;

// Common error codes for all services
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_ARGUMENT = 1;
  ERROR_CODE_NOT_FOUND = 2;
  ERROR_CODE_ALREADY_EXISTS = 3;
  ERROR_CODE_PERMISSION_DENIED = 4;
  ERROR_CODE_UNAUTHENTICATED = 5;
  ERROR_CODE_RESOURCE_EXHAUSTED = 6;
  ERROR_CODE_FAILED_PRECONDITION = 7;
  ERROR_CODE_ABORTED = 8;
  ERROR_CODE_OUT_OF_RANGE = 9;
  ERROR_CODE_UNIMPLEMENTED = 10;
  ERROR_CODE_INTERNAL = 11;
  ERROR_CODE_UNAVAILABLE = 12;
  ERROR_CODE_DATA_LOSS = 13;
  ERROR_CODE_UNKNOWN = 14;
  // Service-specific errors start from 1000
  ERROR_CODE_SERVICE_SPECIFIC_START = 1000;
}

// Standardized API error response
message ApiError {
  ErrorCode code = 1;
  string message = 2;
  map<string, string> details = 3;
}

// Generic status message for use across services
message Status {
  int32 code = 1; // 0 = OK, nonzero = error
  string message = 2;
}

import "google/protobuf/timestamp.proto";

// Message structure for a log entry
message LogEntry {
  google.protobuf.Timestamp timestamp = 1;
  string level = 2; // e.g., INFO, DEBUG, ERROR
  string service_name = 3; // Name of the service generating the log
  string logger_name = 4; // Name of the logger (e.g., module name)
  string message = 5;
  map<string, string> metadata = 6; // For structured data like request IDs, etc.
}

// Request for streaming logs (can be extended with filters in the future)
message StreamLogsRequest {
  // string min_level = 1; // Example filter: minimum log level
  // string service_filter = 2; // Example filter: specific service if this was a central aggregator
}

// Service for streaming logs from a service instance
service LoggingStreamer {
  // Streams log entries as they are generated by the service.
  rpc StreamLogs (StreamLogsRequest) returns (stream LogEntry);
}
