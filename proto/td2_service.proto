syntax = "proto3";

package td2_service;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// TD-2 Document Service Definition
service TD2Service {
    // Create a new TD-2 document
    rpc CreateTD2Document(CreateTD2DocumentRequest) returns (CreateTD2DocumentResponse);
    
    // Issue a TD-2 document (finalize)
    rpc IssueTD2Document(IssueTD2DocumentRequest) returns (IssueTD2DocumentResponse);
    
    // Verify a TD-2 document
    rpc VerifyTD2Document(VerifyTD2DocumentRequest) returns (VerifyTD2DocumentResponse);
    
    // Get TD-2 document by ID
    rpc GetTD2Document(GetTD2DocumentRequest) returns (GetTD2DocumentResponse);
    
    // Search TD-2 documents
    rpc SearchTD2Documents(SearchTD2DocumentsRequest) returns (SearchTD2DocumentsResponse);
    
    // Update TD-2 document status
    rpc UpdateTD2DocumentStatus(UpdateTD2DocumentStatusRequest) returns (UpdateTD2DocumentStatusResponse);
    
    // Revoke TD-2 document
    rpc RevokeTD2Document(RevokeTD2DocumentRequest) returns (RevokeTD2DocumentResponse);
    
    // Renew TD-2 document
    rpc RenewTD2Document(RenewTD2DocumentRequest) returns (RenewTD2DocumentResponse);
    
    // Batch operations
    rpc CreateTD2DocumentsBatch(CreateTD2DocumentsBatchRequest) returns (CreateTD2DocumentsBatchResponse);
    rpc VerifyTD2DocumentsBatch(VerifyTD2DocumentsBatchRequest) returns (VerifyTD2DocumentsBatchResponse);
    
    // Reports
    rpc GetTD2Statistics(google.protobuf.Empty) returns (TD2StatisticsResponse);
    rpc GetExpiringTD2Documents(GetExpiringTD2DocumentsRequest) returns (GetExpiringTD2DocumentsResponse);
}

// Enumerations
enum TD2DocumentType {
    TD2_DOCUMENT_TYPE_UNSPECIFIED = 0;
    ID = 1;    // National identity card
    AC = 2;    // Crew member certificate
    IA = 3;    // Residence permit type A
    IC = 4;    // Residence permit type C
    IF = 5;    // Residence permit type F
    IP = 6;    // Residence permit type P
    IR = 7;    // Residence permit type R
    IV = 8;    // Residence permit type V
}

enum TD2Gender {
    TD2_GENDER_UNSPECIFIED = 0;
    MALE = 1;
    FEMALE = 2;
    UNSPECIFIED_GENDER = 3;
}

enum TD2Status {
    TD2_STATUS_UNSPECIFIED = 0;
    DRAFT = 1;
    ISSUED = 2;
    ACTIVE = 3;
    EXPIRED = 4;
    REVOKED = 5;
    SUSPENDED = 6;
}

enum TD2SecurityModel {
    TD2_SECURITY_MODEL_UNSPECIFIED = 0;
    MRZ_ONLY = 1;        // MRZ with check digits only
    MINIMAL_CHIP = 2;    // DG1 + DG2 + SOD
    EXTENDED_CHIP = 3;   // Additional data groups
}

// Data structures
message TD2PersonalData {
    string primary_identifier = 1;    // Surname
    string secondary_identifier = 2;  // Given names
    string nationality = 3;
    string date_of_birth = 4;        // ISO date format (YYYY-MM-DD)
    TD2Gender gender = 5;
    string place_of_birth = 6;
}

message TD2DocumentData {
    TD2DocumentType document_type = 1;
    string document_number = 2;
    string issuing_state = 3;
    string date_of_issue = 4;        // ISO date format (YYYY-MM-DD)
    string date_of_expiry = 5;       // ISO date format (YYYY-MM-DD)
    string place_of_issue = 6;
    string issuing_authority = 7;
}

message TD2MRZData {
    string line1 = 1;               // 36 characters
    string line2 = 2;               // 36 characters
    string check_digit_document = 3;
    string check_digit_dob = 4;
    string check_digit_expiry = 5;
    string check_digit_composite = 6;
}

message TD2ChipData {
    bytes dg1_mrz = 1;             // Data Group 1 - MRZ data
    bytes dg2_portrait = 2;        // Data Group 2 - Portrait image
    bytes sod = 3;                 // Security Object Data
    map<string, bytes> additional_dgs = 4;  // Additional data groups
    string hash_algorithm = 5;
    repeated string certificate_chain = 6;
}

message TD2PolicyConstraints {
    repeated string work_authorization = 1;     // Work permit restrictions
    repeated string study_authorization = 2;    // Study permit restrictions
    repeated string travel_restrictions = 3;    // Travel limitations
    repeated string employment_sectors = 4;     // Allowed employment sectors
    int32 max_stay_duration = 5;              // Maximum stay in days
    bool renewable = 6;                       // Whether document is renewable
}

message TD2VerificationResult {
    bool is_valid = 1;
    bool mrz_valid = 2;
    bool chip_valid = 3;
    bool dates_valid = 4;
    bool policy_valid = 5;
    repeated string errors = 6;
    repeated string warnings = 7;
    map<string, string> details = 8;
    google.protobuf.Timestamp verified_at = 9;
}

message TD2Document {
    string document_id = 1;
    TD2PersonalData personal_data = 2;
    TD2DocumentData document_data = 3;
    TD2MRZData mrz_data = 4;
    TD2ChipData chip_data = 5;
    TD2PolicyConstraints policy_constraints = 6;
    TD2Status status = 7;
    TD2SecurityModel security_model = 8;
    map<string, string> metadata = 9;
    string created_by = 10;
    google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
    string version = 13;
}

// Request/Response messages
message CreateTD2DocumentRequest {
    TD2PersonalData personal_data = 1;
    TD2DocumentData document_data = 2;
    TD2SecurityModel security_model = 3;
    TD2PolicyConstraints policy_constraints = 4;
    map<string, string> metadata = 5;
}

message CreateTD2DocumentResponse {
    TD2Document document = 1;
    bool success = 2;
    string message = 3;
    repeated string errors = 4;
}

message IssueTD2DocumentRequest {
    string document_id = 1;
    bool generate_chip_data = 2;
    map<string, string> issuer_metadata = 3;
}

message IssueTD2DocumentResponse {
    TD2Document document = 1;
    bool success = 2;
    string message = 3;
    repeated string errors = 4;
}

message VerifyTD2DocumentRequest {
    oneof document_input {
        string document_id = 1;
        TD2MRZData mrz_data = 2;
        TD2Document full_document = 3;
    }
    bool verify_chip = 4;
    bool verify_policies = 5;
    map<string, string> context = 6;
}

message VerifyTD2DocumentResponse {
    TD2VerificationResult result = 1;
    TD2Document document = 2;
    bool success = 3;
    string message = 4;
}

message GetTD2DocumentRequest {
    string document_id = 1;
    bool include_chip_data = 2;
}

message GetTD2DocumentResponse {
    TD2Document document = 1;
    bool success = 2;
    string message = 3;
}

message SearchTD2DocumentsRequest {
    string query = 1;
    TD2DocumentType document_type = 2;
    TD2Status status = 3;
    string issuing_state = 4;
    string nationality = 5;
    string date_from = 6;
    string date_to = 7;
    int32 limit = 8;
    int32 offset = 9;
}

message SearchTD2DocumentsResponse {
    repeated TD2Document documents = 1;
    int32 total_count = 2;
    bool success = 3;
    string message = 4;
}

message UpdateTD2DocumentStatusRequest {
    string document_id = 1;
    TD2Status new_status = 2;
    string reason = 3;
    map<string, string> metadata = 4;
}

message UpdateTD2DocumentStatusResponse {
    TD2Document document = 1;
    bool success = 2;
    string message = 3;
}

message RevokeTD2DocumentRequest {
    string document_id = 1;
    string reason = 2;
    map<string, string> metadata = 3;
}

message RevokeTD2DocumentResponse {
    TD2Document document = 1;
    bool success = 2;
    string message = 3;
}

message RenewTD2DocumentRequest {
    string document_id = 1;
    string new_expiry_date = 2;
    TD2PolicyConstraints updated_constraints = 3;
    map<string, string> metadata = 4;
}

message RenewTD2DocumentResponse {
    TD2Document document = 1;
    bool success = 2;
    string message = 3;
}

// Batch operations
message CreateTD2DocumentsBatchRequest {
    repeated CreateTD2DocumentRequest requests = 1;
    map<string, string> batch_metadata = 2;
}

message CreateTD2DocumentsBatchResponse {
    repeated CreateTD2DocumentResponse responses = 1;
    int32 success_count = 2;
    int32 error_count = 3;
    bool success = 4;
    string message = 5;
}

message VerifyTD2DocumentsBatchRequest {
    repeated VerifyTD2DocumentRequest requests = 1;
    map<string, string> batch_metadata = 2;
}

message VerifyTD2DocumentsBatchResponse {
    repeated VerifyTD2DocumentResponse responses = 1;
    int32 success_count = 2;
    int32 error_count = 3;
    bool success = 4;
    string message = 5;
}

// Statistics and reports
message TD2StatisticsResponse {
    int32 total_documents = 1;
    int32 active_documents = 2;
    int32 expired_documents = 3;
    int32 revoked_documents = 4;
    map<string, int32> by_document_type = 5;
    map<string, int32> by_issuing_state = 6;
    map<string, int32> by_status = 7;
    google.protobuf.Timestamp generated_at = 8;
}

message GetExpiringTD2DocumentsRequest {
    int32 days_until_expiry = 1;
    TD2DocumentType document_type = 2;
    string issuing_state = 3;
    int32 limit = 4;
    int32 offset = 5;
}

message GetExpiringTD2DocumentsResponse {
    repeated TD2Document documents = 1;
    int32 total_count = 2;
    bool success = 3;
    string message = 4;
}