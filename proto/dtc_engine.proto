syntax = "proto3";

package marty.dtc.v1;

import "common_services.proto";

// Digital Travel Credential (DTC) Engine Service
service DTCEngine {
  // Create a new Digital Travel Credential from passport data
  rpc CreateDTC(CreateDTCRequest) returns (CreateDTCResponse) {}
  
  // Get an existing DTC by ID
  rpc GetDTC(GetDTCRequest) returns (DTCResponse) {}
  
  // Sign a DTC using the Document Signer service
  rpc SignDTC(SignDTCRequest) returns (SignDTCResponse) {}
  
  // Revoke a DTC
  rpc RevokeDTC(RevokeDTCRequest) returns (RevokeDTCResponse) {}
  
  // Generate QR code for offline verification of a DTC
  rpc GenerateDTCQRCode(GenerateDTCQRCodeRequest) returns (GenerateDTCQRCodeResponse) {}
  
  // Transfer a DTC to a mobile device
  rpc TransferDTCToDevice(TransferDTCToDeviceRequest) returns (TransferDTCToDeviceResponse) {}
  
  // Verify a DTC
  rpc VerifyDTC(VerifyDTCRequest) returns (VerifyDTCResponse) {}
  
  // Link a DTC to a physical passport
  rpc LinkDTCToPassport(LinkDTCToPassportRequest) returns (LinkDTCToPassportResponse) {}
}

// Types of Digital Travel Credentials
enum DTCType {
  UNKNOWN_DTC_TYPE = 0;
  VIRTUAL = 1;      // Virtual DTC (vDTC) - standalone credential not requiring physical passport
  PHYSICAL = 2;     // Physical DTC (pDTC) - used alongside physical passport
  TEMPORARY = 3;    // Temporary DTC (tDTC) - limited validity for specific purpose
}

// Access control options for DTC
enum AccessControl {
  UNKNOWN_ACCESS_CONTROL = 0;
  NONE = 1;              // No access control, anyone with the DTC ID can access
  PASSWORD = 2;          // Password-based access control
  BIOMETRIC = 3;         // Biometric-based access control (e.g., fingerprint, face)
  CERTIFICATE = 4;       // Certificate-based access control
}

// Request to create a new DTC
message CreateDTCRequest {
  string passport_number = 1;
  bytes passport_mrz = 2;
  string issuing_authority = 3;  // ISO country code
  string issue_date = 4;         // ISO 8601 date format (YYYY-MM-DD)
  string expiry_date = 5;        // ISO 8601 date format (YYYY-MM-DD)
  PersonalDetails personal_details = 6;
  repeated DataGroup data_groups = 7;
  DTCType dtc_type = 8;
  AccessControl access_control = 9;
  string access_key = 10;        // Password or access key if access control is enabled
  string dtc_valid_from = 11;    // ISO 8601 date (YYYY-MM-DD), if different from issue_date
  string dtc_valid_until = 12;   // ISO 8601 date (YYYY-MM-DD), if different from expiry_date
}

// Response for DTC creation
message CreateDTCResponse {
  string dtc_id = 1;
  string status = 2;
  string error_message = 3;
}

// Request to get an existing DTC
message GetDTCRequest {
  string dtc_id = 1;
  string access_key = 2;  // Optional, required if access control is enabled
}

// Personal details included in a DTC
message PersonalDetails {
  string first_name = 1;
  string last_name = 2;
  string date_of_birth = 3;    // ISO 8601 date format (YYYY-MM-DD)
  string gender = 4;           // M, F, or X
  string nationality = 5;      // ISO country code
  string place_of_birth = 6;   // Optional
  bytes portrait = 7;          // Binary image data for portrait/photo
  bytes signature = 8;         // Binary image data for signature
  repeated string other_names = 9;  // Middle names, aliases, etc.
}

// Data group in a DTC (similar to passport data groups)
message DataGroup {
  int32 dg_number = 1;    // Data Group number (DG1, DG2, etc.)
  bytes data = 2;         // Binary data for this data group
  string data_type = 3;   // Type of data (e.g., "MRZ", "FACE", "FINGERPRINT")
}

// Signature information
message SignatureInfo {
  string signature_date = 1;  // ISO 8601 date-time format
  string signer_id = 2;       // ID of the document signer
  bytes signature = 3;        // Binary signature data
  bool is_valid = 4;          // Whether signature was verified as valid
}

// DTC data response
message DTCResponse {
  string dtc_id = 1;
  string passport_number = 2;
  string issuing_authority = 3;
  string issue_date = 4;
  string expiry_date = 5;
  PersonalDetails personal_details = 6;
  repeated DataGroup data_groups = 7;
  DTCType dtc_type = 8;
  string dtc_valid_from = 9;
  string dtc_valid_until = 10;
  SignatureInfo signature_info = 11;
  bool is_revoked = 12;
  string revocation_reason = 13;
  string revocation_date = 14;
  string status = 15;
  string error_message = 16;
}

// Request to sign a DTC
message SignDTCRequest {
  string dtc_id = 1;
  string access_key = 2;  // Optional, required if access control is enabled
}

// Response for DTC signing
message SignDTCResponse {
  bool success = 1;
  SignatureInfo signature_info = 2;
  string error_message = 3;
}

// Request to revoke a DTC
message RevokeDTCRequest {
  string dtc_id = 1;
  string reason = 2;
  string access_key = 3;  // Optional, required if access control is enabled
}

// Response for DTC revocation
message RevokeDTCResponse {
  bool success = 1;
  string revocation_date = 2;
  string error_message = 3;
}

// Request to generate QR code for a DTC
message GenerateDTCQRCodeRequest {
  string dtc_id = 1;
  bool include_portrait = 2;
  bool include_biometrics = 3;
  repeated int32 dg_numbers_to_include = 4;  // Optional, specific DGs to include
  string access_key = 5;  // Optional, required if access control is enabled
  string qr_format = 6;   // Optional, desired image format (e.g., "PNG")
  int32 qr_size = 7;      // Optional, desired size in pixels
}

// Response with QR code data
message GenerateDTCQRCodeResponse {
  bytes qr_code = 1;  // Binary QR code image data
  string error_message = 2;
}

// Request to transfer a DTC to a mobile device
message TransferDTCToDeviceRequest {
  string dtc_id = 1;
  string device_id = 2;
  string transfer_method = 3;  // "BLE", "NFC", "QR", etc.
  string access_key = 4;       // Optional, required if access control is enabled
}

// Response for DTC transfer
message TransferDTCToDeviceResponse {
  bool success = 1;
  string transfer_id = 2;
  string error_message = 3;
}

// Verification result for a specific check
message VerificationCheck {
  string check_name = 1;
  bool passed = 2;
  string details = 3;
}

// Request to verify a DTC
message VerifyDTCRequest {
  oneof dtc_data {
    string dtc_id = 1;        // Verify by DTC ID in the system
    bytes qr_code_data = 2;   // Verify from QR code data
    bytes device_data = 3;    // Verify from data received from mobile device
  }
  bool check_passport_link = 4;    // Whether to check if DTC is linked to physical passport
  string passport_number = 5;      // Optional, for passport linkage verification
  string access_key = 6;          // Optional, required if access control is enabled
}

// Response for DTC verification
message VerifyDTCResponse {
  bool is_valid = 1;
  repeated VerificationCheck verification_results = 2;
  DTCResponse dtc_data = 3;
  string error_message = 4;
  VerificationResult verification_result = 5;
}

// Top-level overall verification result enum (referenced by tests)
enum VerificationResult {
  UNKNOWN_RESULT = 0;
  VALID = 1;
  INVALID = 2;
  NOT_SIGNED = 3;
  ACCESS_DENIED = 4;
  REVOKED = 5;
  INVALID_SIGNATURE = 6;
  EXPIRED = 7;
}

// Request to link a DTC to a physical passport
message LinkDTCToPassportRequest {
  string dtc_id = 1;
  string passport_number = 2;
  string access_key = 3;      // Optional, required if access control is enabled
  bytes passport_mrz_data = 4; // Optional, MRZ data for verification
}

// Response for DTC linkage
message LinkDTCToPassportResponse {
  bool success = 1;
  string link_date = 2;
  string error_message = 3;
}