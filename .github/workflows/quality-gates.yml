name: Quality Gates & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest-docker docker
        
    - name: Start services for testing
      run: |
        docker-compose -f docker/docker-compose.yml up -d postgres trust-svc csca-service
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8090/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8092/health; do sleep 2; done'
        
    - name: Run contract tests
      run: |
        pytest tests/e2e/test_contract_testing.py -v --tb=short
        
    - name: Upload contract test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: contract-test-results
        path: reports/

  chaos-tests:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: contract-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Start services for chaos testing
      run: |
        docker-compose -f docker/docker-compose.yml up -d postgres trust-svc pkd-service
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8090/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8088/health; do sleep 2; done'
        
    - name: Run chaos tests
      run: |
        pytest tests/e2e/test_chaos_engineering.py -v -m chaos --tb=short
        
    - name: Upload chaos test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: chaos-test-results
        path: reports/

  performance-tests:
    name: Performance Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Start services for performance testing
      run: |
        docker-compose -f docker/docker-compose.yml up -d postgres trust-svc pkd-service
        
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8090/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8088/health; do sleep 2; done'
        
    - name: Run performance smoke tests
      run: |
        # Small load test for CI - 5 users, 30 seconds
        ./scripts/run_perf_test.sh trust-svc load 5 30
        ./scripts/run_perf_test.sh pkd-service load 5 30
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: reports/performance/

  security-scan:
    name: Security & SBOM Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Syft
      uses: anchore/sbom-action/download-syft@v0
      
    - name: Install Grype
      uses: anchore/scan-action/download-grype@v3
      
    - name: Build Docker images
      run: |
        docker-compose -f docker/docker-compose.yml build trust-svc pkd-service csca-service
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: trust-svc:latest
        format: spdx-json
        output-file: reports/security/sbom/trust-svc.spdx.json
        
    - name: Scan for vulnerabilities
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: trust-svc:latest
        output-format: sarif
        output-file: reports/security/vulnerabilities/trust-svc.sarif
        
    - name: Upload vulnerability results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: reports/security/vulnerabilities/trust-svc.sarif
        
    - name: Run comprehensive security scan
      run: |
        chmod +x scripts/security_scan.sh
        ./scripts/security_scan.sh containers
        
    - name: Check security policy compliance
      run: |
        # Fail if critical vulnerabilities found
        critical_vulns=$(jq -r '.critical_vulnerabilities' reports/security/security_summary.json || echo "0")
        high_vulns=$(jq -r '.high_vulnerabilities' reports/security/security_summary.json || echo "0")
        
        echo "Critical vulnerabilities: $critical_vulns"
        echo "High vulnerabilities: $high_vulns"
        
        if [ "$critical_vulns" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found - failing build"
          exit 1
        fi
        
        if [ "$high_vulns" -gt 10 ]; then
          echo "❌ Too many high vulnerabilities ($high_vulns) - failing build"
          exit 1
        fi
        
        echo "✅ Security policy compliance check passed"
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: reports/security/

  container-hardening-check:
    name: Container Hardening Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify Docker security configurations
      run: |
        # Check that Dockerfiles follow security best practices
        echo "🔍 Checking Dockerfile security practices..."
        
        failed_checks=0
        
        for dockerfile in docker/*.Dockerfile; do
          echo "Checking $dockerfile..."
          
          # Check for non-root user
          if ! grep -q "USER" "$dockerfile"; then
            echo "❌ $dockerfile: Missing USER instruction"
            failed_checks=$((failed_checks + 1))
          fi
          
          # Check for health checks
          if ! grep -q "HEALTHCHECK" "$dockerfile"; then
            echo "❌ $dockerfile: Missing HEALTHCHECK instruction"
            failed_checks=$((failed_checks + 1))
          fi
          
          # Check for minimal base images
          if grep -qE "FROM.*:(alpine|distroless|slim)" "$dockerfile"; then
            echo "✅ $dockerfile: Using minimal base image"
          else
            echo "⚠️ $dockerfile: Consider using minimal base image"
          fi
        done
        
        if [ $failed_checks -gt 0 ]; then
          echo "❌ Container hardening checks failed: $failed_checks issues found"
          exit 1
        fi
        
        echo "✅ All container hardening checks passed"
        
    - name: Verify docker-compose security configuration
      run: |
        if [ -f "docker/docker-compose.security.yml" ]; then
          echo "✅ Security hardening configuration found"
          
          # Verify security configurations exist
          if grep -q "cap_drop:" docker/docker-compose.security.yml; then
            echo "✅ Capability dropping configured"
          else
            echo "❌ Missing capability dropping configuration"
            exit 1
          fi
          
          if grep -q "read_only:" docker/docker-compose.security.yml; then
            echo "✅ Read-only filesystem configured"
          else
            echo "❌ Missing read-only filesystem configuration"
            exit 1
          fi
          
          if grep -q "no-new-privileges" docker/docker-compose.security.yml; then
            echo "✅ No-new-privileges configured"
          else
            echo "❌ Missing no-new-privileges configuration"
            exit 1
          fi
        else
          echo "❌ Security hardening configuration missing"
          exit 1
        fi

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [contract-tests, chaos-tests, performance-tests, security-scan, container-hardening-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate quality gate report
      run: |
        echo "# Quality Gate Results" > quality_report.md
        echo "" >> quality_report.md
        
        echo "## Test Results Summary" >> quality_report.md
        echo "- Contract Tests: ${{ needs.contract-tests.result }}" >> quality_report.md
        echo "- Chaos Tests: ${{ needs.chaos-tests.result }}" >> quality_report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> quality_report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> quality_report.md
        echo "- Container Hardening: ${{ needs.container-hardening-check.result }}" >> quality_report.md
        echo "" >> quality_report.md
        
        # Determine overall status
        if [[ "${{ needs.contract-tests.result }}" == "success" && \
              "${{ needs.chaos-tests.result }}" == "success" && \
              "${{ needs.performance-tests.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" && \
              "${{ needs.container-hardening-check.result }}" == "success" ]]; then
          echo "## Overall Status: ✅ PASS" >> quality_report.md
          echo "All quality gates have passed successfully." >> quality_report.md
        else
          echo "## Overall Status: ❌ FAIL" >> quality_report.md
          echo "One or more quality gates have failed." >> quality_report.md
        fi
        
        cat quality_report.md
        
    - name: Upload quality gate report
      uses: actions/upload-artifact@v3
      with:
        name: quality-gate-report
        path: quality_report.md