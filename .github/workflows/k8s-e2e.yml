# Marty MMF Plugin - Enhanced CI with Kubernetes E2E Testing

name: Marty CI Enhanced

# TEMPORARILY DISABLED - CI checks turned off while fixing tests
# To re-enable, uncomment the push/pull_request/schedule triggers below
on:
  workflow_dispatch:
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main, develop ]
  # schedule:
  #   # Run daily E2E tests at 2 AM UTC
  #   - cron: '0 2 * * *'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  CLUSTER_NAME: marty-ci-${{ github.run_id }}

jobs:
  # Unit and Integration Tests (unchanged)
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv install -e .

    - name: Compile proto files
      run: python -m src.compile_protos

    - name: Run unit tests with coverage
      run: |
        uv run pytest tests/unit \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=test-results.xml

    - name: Run integration tests
      run: uv run pytest tests/integration --junitxml=integration-results.xml

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          integration-results.xml
          htmlcov/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Code Quality (enhanced)
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv and tools
      run: |
        pip install uv
        uv install -e .
        uv pip install black isort ruff mypy types-requests types-PyYAML bandit safety

    - name: Check code formatting
      run: uv run black --check src tests

    - name: Check import order
      run: uv run isort --check src tests

    - name: Lint with ruff
      run: uv run ruff check src tests

    - name: Type check with mypy
      run: uv run mypy src --config-file pyproject.toml

    - name: Security scan with bandit
      run: uv run bandit -r src -f json -o bandit-report.json
      continue-on-error: true

    - name: Check dependencies for vulnerabilities
      run: uv run safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build Plugin Image
  build:
    name: Build Plugin Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build plugin image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/mmf-plugin.Dockerfile
        target: production
        tags: marty-mmf-plugin:ci-${{ github.sha }}
        outputs: type=docker,dest=/tmp/plugin-image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload image artifact
      uses: actions/upload-artifact@v3
      with:
        name: plugin-image
        path: /tmp/plugin-image.tar
        retention-days: 1

  # Kind Cluster Testing (Local K8s simulation)
  test-kind:
    name: Kind Cluster Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kind
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        config: k8s/kind/ci-config.yaml
        wait: 300s

    - name: Download plugin image
      uses: actions/download-artifact@v3
      with:
        name: plugin-image
        path: /tmp

    - name: Load image into Kind
      run: |
        docker load --input /tmp/plugin-image.tar
        kind load docker-image marty-mmf-plugin:ci-${{ github.sha }} --name ${{ env.CLUSTER_NAME }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Update manifests for CI
      run: |
        # Update image tag in deployment
        sed -i 's|marty-mmf-plugin:latest|marty-mmf-plugin:ci-${{ github.sha }}|g' k8s/manifests/deployment.yaml

    - name: Deploy to Kind cluster
      run: |
        chmod +x k8s/deploy.sh
        ./k8s/deploy.sh apply development

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available deployment/marty-mmf-plugin -n marty-mmf --timeout=300s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=marty-mmf-plugin -n marty-mmf --timeout=300s

    - name: Run Kind cluster tests
      run: |
        chmod +x k8s/test.sh
        ./k8s/test.sh extended

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Deployment Status ==="
        kubectl describe deployment marty-mmf-plugin -n marty-mmf
        echo "=== Pod Status ==="
        kubectl describe pods -l app.kubernetes.io/name=marty-mmf-plugin -n marty-mmf
        echo "=== Pod Logs ==="
        kubectl logs -l app.kubernetes.io/name=marty-mmf-plugin -n marty-mmf --all-containers=true
        echo "=== Events ==="
        kubectl get events -n marty-mmf --sort-by='.lastTimestamp'

  # Real Kubernetes E2E Testing (using GitHub's K8s clusters)
  test-k8s-e2e:
    name: Kubernetes E2E Tests
    runs-on: ubuntu-latest
    needs: [test-kind]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        k8s-version: ['1.28', '1.29']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Kubernetes cluster
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 'latest'
        kubernetes-version: v${{ matrix.k8s-version }}.0
        driver: docker
        start-args: '--memory=4096 --cpus=2'

    - name: Download plugin image
      uses: actions/download-artifact@v3
      with:
        name: plugin-image
        path: /tmp

    - name: Load image into Minikube
      run: |
        docker load --input /tmp/plugin-image.tar
        minikube image load marty-mmf-plugin:ci-${{ github.sha }}

    - name: Update manifests for E2E
      run: |
        # Update image tag and pull policy for E2E
        sed -i 's|marty-mmf-plugin:latest|marty-mmf-plugin:ci-${{ github.sha }}|g' k8s/manifests/deployment.yaml
        sed -i 's|imagePullPolicy: IfNotPresent|imagePullPolicy: Never|g' k8s/manifests/deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        chmod +x k8s/deploy.sh
        ./k8s/deploy.sh apply production

    - name: Install metrics-server
      run: |
        kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        kubectl patch deployment metrics-server -n kube-system --type='json' \
          -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'

    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available deployment/marty-mmf-plugin -n marty-mmf --timeout=600s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=marty-mmf-plugin -n marty-mmf --timeout=600s

    - name: Run E2E tests
      run: |
        chmod +x k8s/test.sh
        ./k8s/test.sh e2e

    - name: Performance testing
      run: |
        # Install hey for load testing
        wget -O hey https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
        chmod +x hey
        
        # Get service IP
        SERVICE_IP=$(kubectl get service marty-mmf-plugin-service -n marty-mmf -o jsonpath='{.spec.clusterIP}')
        
        # Run load test
        ./hey -n 1000 -c 10 -q 10 http://$SERVICE_IP:8081/health

    - name: Test horizontal scaling
      run: |
        # Scale up
        kubectl scale deployment marty-mmf-plugin -n marty-mmf --replicas=5
        kubectl wait --for=condition=available deployment/marty-mmf-plugin -n marty-mmf --timeout=300s
        
        # Verify scaling
        REPLICAS=$(kubectl get deployment marty-mmf-plugin -n marty-mmf -o jsonpath='{.status.readyReplicas}')
        if [ "$REPLICAS" != "5" ]; then
          echo "Scaling failed: expected 5 replicas, got $REPLICAS"
          exit 1
        fi
        
        # Scale down
        kubectl scale deployment marty-mmf-plugin -n marty-mmf --replicas=2
        kubectl wait --for=condition=available deployment/marty-mmf-plugin -n marty-mmf --timeout=300s

    - name: Test rolling update
      run: |
        # Trigger rolling update
        kubectl patch deployment marty-mmf-plugin -n marty-mmf \
          -p '{"spec":{"template":{"metadata":{"annotations":{"test/update":"'$(date)'"}}}}}}'
        
        # Wait for rollout
        kubectl rollout status deployment/marty-mmf-plugin -n marty-mmf --timeout=300s

    - name: Collect comprehensive logs
      if: always()
      run: |
        mkdir -p logs
        
        echo "=== Cluster Info ===" > logs/cluster-info.txt
        kubectl cluster-info >> logs/cluster-info.txt
        
        echo "=== Node Status ===" > logs/node-status.txt
        kubectl describe nodes >> logs/node-status.txt
        
        echo "=== Deployment ===" > logs/deployment.txt
        kubectl describe deployment marty-mmf-plugin -n marty-mmf >> logs/deployment.txt
        
        echo "=== Pods ===" > logs/pods.txt
        kubectl describe pods -l app.kubernetes.io/name=marty-mmf-plugin -n marty-mmf >> logs/pods.txt
        
        echo "=== Services ===" > logs/services.txt
        kubectl describe services -n marty-mmf >> logs/services.txt
        
        echo "=== Events ===" > logs/events.txt
        kubectl get events -n marty-mmf --sort-by='.lastTimestamp' >> logs/events.txt
        
        echo "=== Pod Logs ===" > logs/pod-logs.txt
        kubectl logs -l app.kubernetes.io/name=marty-mmf-plugin -n marty-mmf --all-containers=true >> logs/pod-logs.txt

    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-logs-k8s-${{ matrix.k8s-version }}
        path: logs/

  # Security scanning for the built image
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Download plugin image
      uses: actions/download-artifact@v3
      with:
        name: plugin-image
        path: /tmp

    - name: Load image
      run: docker load --input /tmp/plugin-image.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'marty-mmf-plugin:ci-${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [test, lint, test-kind, test-k8s-e2e, security-scan]
    if: always()
    
    steps:
    - name: Check CI status
      run: |
        echo "CI Pipeline Status Summary"
        echo "========================="
        echo "Test: ${{ needs.test.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Kind Tests: ${{ needs.test-kind.result }}"
        echo "K8s E2E Tests: ${{ needs.test-k8s-e2e.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        # Fail if any critical jobs failed
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.test-kind.result }}" == "failure" ]]; then
          echo "Critical tests failed!"
          exit 1
        fi
        
        echo "CI pipeline completed successfully! 🎉"