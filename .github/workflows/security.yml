name: Security Scanning and Hardening

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - secrets
          - containers

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          source $HOME/.cargo/env
          uv sync --dev

      - name: Run Safety check
        run: |
          source $HOME/.cargo/env
          mkdir -p reports/security/dependency
          uv run safety check --json --output reports/security/dependency/safety_report.json || true
          uv run safety check --output reports/security/dependency/safety_report.txt || true

      - name: Run pip-audit
        run: |
          source $HOME/.cargo/env
          uv add --dev pip-audit
          uv run pip-audit --format=json --output=reports/security/dependency/pip_audit_report.json || true
          uv run pip-audit --format=text --output=reports/security/dependency/pip_audit_report.txt || true

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: reports/security/dependency/
          retention-days: 30

  # Code Security Analysis
  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          source $HOME/.cargo/env
          uv sync --dev

      - name: Run Bandit security analysis
        run: |
          source $HOME/.cargo/env
          mkdir -p reports/security/code
          uv run bandit -r src/ -f json -o reports/security/code/bandit_report.json || true
          uv run bandit -r src/ -f txt -o reports/security/code/bandit_report.txt || true

      - name: Run Semgrep analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/owasp-top-ten
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Upload code security results
        uses: actions/upload-artifact@v3
        with:
          name: code-security-results
          path: reports/security/code/
          retention-days: 30

  # Secrets Detection
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          source $HOME/.cargo/env
          uv sync --dev

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run detect-secrets
        run: |
          source $HOME/.cargo/env
          mkdir -p reports/security/secrets
          uv add --dev detect-secrets
          uv run detect-secrets scan --all-files > reports/security/secrets/detect_secrets_baseline.json || true

      - name: Upload secrets scan results
        uses: actions/upload-artifact@v3
        with:
          name: secrets-scan-results
          path: reports/security/secrets/
          retention-days: 30

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container images
        run: |
          docker build -f docker/base.Dockerfile -t marty-base:latest .
          docker build -f docker/service.Dockerfile -t marty-service:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: marty-service:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: marty-service:latest
          sarif-file: scout-results.sarif

      - name: Upload container scan results
        uses: actions/upload-artifact@v3
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            scout-results.sarif
          retention-days: 30

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' }}

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # OSSAR Analysis (Microsoft Security Code Analysis)
  ossar-analysis:
    name: Microsoft Security Code Analysis
    runs-on: windows-latest
    if: ${{ github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run OSSAR
        uses: github/ossar-action@v1
        id: ossar

      - name: Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan, container-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: reports/security/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Generate security summary
        run: |
          source $HOME/.cargo/env
          chmod +x scripts/security_scan.sh
          ./scripts/security_scan.sh full || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: reports/security/security_summary.md
          retention-days: 90

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('reports/security/security_summary.md', 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üõ°Ô∏è Security Scan Results\n\n${summary}`
              });
            } catch (error) {
              console.log('Could not read security summary:', error);
            }

  # Security Policy Validation
  policy-validation:
    name: Security Policy Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate security policies
        run: |
          # Check if security policy files exist
          if [ ! -f "config/security/security_policy.yaml" ]; then
            echo "‚ùå Security policy file missing"
            exit 1
          fi

          if [ ! -f "config/security/bandit.yaml" ]; then
            echo "‚ùå Bandit configuration missing"
            exit 1
          fi

          if [ ! -f "config/security/automation.yaml" ]; then
            echo "‚ùå Security automation config missing"
            exit 1
          fi

          echo "‚úÖ All security policy files present"

      - name: Validate YAML syntax
        run: |
          python -c "
          import yaml
          import sys

          files = [
            'config/security/security_policy.yaml',
            'config/security/bandit.yaml',
            'config/security/automation.yaml'
          ]

          for file in files:
            try:
              with open(file, 'r') as f:
                yaml.safe_load(f)
              print(f'‚úÖ {file} is valid YAML')
            except Exception as e:
              print(f'‚ùå {file} has invalid YAML: {e}')
              sys.exit(1)
          "

      - name: Check security documentation
        run: |
          if [ ! -f "SECURITY.md" ]; then
            echo "‚ö†Ô∏è SECURITY.md file missing - consider adding security policy documentation"
          fi

          echo "‚úÖ Security policy validation complete"

  # Notification on security issues
  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan, container-scan]
    if: failure()

    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            üö® Security scan failed in ${{ github.repository }}

            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}

            Please review the security scan results immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
