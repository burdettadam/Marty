# Marty Monitoring Stack Configuration

global:
  imageRegistry: ""
  storageClass: ""

nameOverride: ""
fullnameOverride: ""

# Prometheus Configuration
prometheus:
  enabled: true

  # Use kube-prometheus-stack for complete setup
  kubePrometheusStack:
    enabled: true

  # Prometheus Server Configuration
  server:
    image:
      repository: prom/prometheus
      tag: v2.48.0
      pullPolicy: IfNotPresent

    retention: "30d"
    retentionSize: "50GB"

    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 2Gi

    # Storage
    persistentVolume:
      enabled: true
      size: 50Gi
      storageClass: ""
      accessModes:
        - ReadWriteOnce

    # Service Configuration
    service:
      type: ClusterIP
      port: 9090
      targetPort: 9090

    # Ingress Configuration
    ingress:
      enabled: false
      className: ""
      annotations: {}
      hosts:
        - host: prometheus.marty.local
          paths:
            - path: /
              pathType: Prefix
      tls: []

    # Security Context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      fsGroup: 65534

    # Node Selector and Tolerations
    nodeSelector: {}
    tolerations: []
    affinity: {}

  # Service Account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # RBAC
  rbac:
    create: true

  # Alert Rules Configuration
  alertRules:
    enabled: true
    # Rules will be loaded from ConfigMap

  # Recording Rules Configuration
  recordingRules:
    enabled: true
    # Rules will be loaded from ConfigMap

  # Scrape Configurations
  scrapeConfigs:
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
        - role: pod
      relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

    - job_name: 'marty-services'
      static_configs:
        - targets:
          - 'csca-service:8080'
          - 'pkd-service:8080'
          - 'document-signer:8080'
          - 'trust-anchor:8080'
          - 'dtc-engine:8080'
          - 'mdl-engine:8080'
          - 'mdoc-engine:8080'
          - 'passport-engine:8080'
          - 'inspection-system:8080'
          - 'credential-ledger:8080'
      metrics_path: /metrics
      scrape_interval: 15s

# Grafana Configuration
grafana:
  enabled: true

  image:
    repository: grafana/grafana
    tag: 10.2.0
    pullPolicy: IfNotPresent

  # Admin Configuration
  adminUser: admin
  adminPassword: "marty-admin-2024"

  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

  # Storage
  persistence:
    enabled: true
    size: 10Gi
    storageClassName: ""
    accessModes:
      - ReadWriteOnce

  # Service Configuration
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000

  # Ingress Configuration
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: grafana.marty.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

  # Datasources Configuration
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://{{ include "marty-monitoring.fullname" . }}-prometheus:9090
          access: proxy
          isDefault: true
          jsonData:
            timeInterval: 15s

  # Dashboard Providers
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'marty-dashboards'
          orgId: 1
          folder: 'Marty'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/marty

  # Dashboards Configuration
  dashboards:
    marty:
      marty-overview:
        file: dashboards/marty-overview.json
      marty-service-detail:
        file: dashboards/marty-service-detail.json
      marty-sla:
        file: dashboards/marty-sla.json

  # Security Context
  securityContext:
    runAsNonRoot: true
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472

  # Service Account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # Node Selector and Tolerations
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Alertmanager Configuration
alertmanager:
  enabled: true

  image:
    repository: prom/alertmanager
    tag: v0.26.0
    pullPolicy: IfNotPresent

  # Resources
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 100m
      memory: 128Mi

  # Storage
  persistence:
    enabled: true
    size: 2Gi
    storageClassName: ""
    accessModes:
      - ReadWriteOnce

  # Service Configuration
  service:
    type: ClusterIP
    port: 9093
    targetPort: 9093

  # Ingress Configuration
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: alertmanager.marty.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

  # Alertmanager Configuration
  config:
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alertmanager@marty.com'
      smtp_auth_username: ''
      smtp_auth_password: ''

    templates:
      - '/etc/alertmanager/templates/*.tmpl'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'marty-team'
      routes:
        - match:
            severity: critical
          receiver: 'marty-oncall'
        - match:
            severity: warning
          receiver: 'marty-team'
        - match:
            team: sre
          receiver: 'sre-team'
        - match:
            team: dev
          receiver: 'dev-team'

    receivers:
      - name: 'marty-team'
        email_configs:
          - to: 'team@marty.com'
            subject: '[MARTY] Alert: {{ .GroupLabels.alertname }}'
            body: |
              {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}
              Service: {{ .Labels.service }}
              Severity: {{ .Labels.severity }}
              {{ end }}

      - name: 'marty-oncall'
        email_configs:
          - to: 'oncall@marty.com'
            subject: '[MARTY CRITICAL] Alert: {{ .GroupLabels.alertname }}'
            body: |
              ðŸš¨ CRITICAL ALERT ðŸš¨
              {{ range .Alerts }}
              Alert: {{ .Annotations.summary }}
              Description: {{ .Annotations.description }}
              Service: {{ .Labels.service }}
              Runbook: {{ .Annotations.runbook_url }}
              {{ end }}

      - name: 'sre-team'
        email_configs:
          - to: 'sre@marty.com'
            subject: '[SRE] Alert: {{ .GroupLabels.alertname }}'

      - name: 'dev-team'
        email_configs:
          - to: 'dev@marty.com'
            subject: '[DEV] Alert: {{ .GroupLabels.alertname }}'

  # Security Context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534

  # Service Account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # Node Selector and Tolerations
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Monitoring Configuration for Marty Services
monitoringConfig:
  # Service Discovery Labels
  serviceLabels:
    app.kubernetes.io/part-of: marty
    app.kubernetes.io/component: service

  # Metrics Collection
  metricsCollection:
    enabled: true
    interval: 15s
    timeout: 10s

  # Health Check Configuration
  healthChecks:
    enabled: true
    interval: 30s
    timeout: 5s
    endpoints:
      - /health
      - /health/ready
      - /health/live

  # Business Metrics
  businessMetrics:
    enabled: true
    retention: "7d"
    labels:
      environment: "{{ .Values.global.environment | default \"development\" }}"
      cluster: "{{ .Values.global.cluster | default \"local\" }}"
      region: "{{ .Values.global.region | default \"us-east-1\" }}"

# Environment-specific overrides
environments:
  development:
    prometheus:
      server:
        retention: "7d"
        retentionSize: "10GB"
    grafana:
      adminPassword: "dev-password"
    alertmanager:
      config:
        route:
          repeat_interval: 30m

  staging:
    prometheus:
      server:
        retention: "14d"
        retentionSize: "25GB"
    grafana:
      adminPassword: "staging-password"
    alertmanager:
      config:
        route:
          repeat_interval: 2h

  production:
    prometheus:
      server:
        retention: "90d"
        retentionSize: "100GB"
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 8Gi
    grafana:
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          cpu: 1000m
          memory: 1Gi
    alertmanager:
      config:
        route:
          repeat_interval: 4h
