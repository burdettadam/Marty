import os
import sys
import pytest
from pathlib import Path

# Add project root to path
project_root = Path(__file__).resolve().parents[3]
sys.path.append(str(project_root))

# Import from Marty's codebase
from src.marty_common.models.asn1_structures import SOD, LDSSecurityObject, DataGroupHash
from src.marty_common.models.passport import DataGroupType

# Directory containing test certificates
CERTS_DIR = Path(__file__).resolve().parent.parent / 'pki' / 'certs'

@pytest.mark.depends(on=[
    'tests/unit/ef/ef_base_test.py::test_ef_base',
    'tests/unit/ef/dg_base_test.py::test_dg_type',
    'tests/unit/ef/dg1_test.py::test_dg1_parsing',
])
def test_sod_basic():
    """Test basic SOD class functionality."""
    # Test vector taken from German BSI TR-03105-5 ReferenceDataSet
    # This is a sample SOD file in DER format
    tv_sod = bytes.fromhex
    
    try:
        # Parse the SOD file
        sod = SOD.load(tv_sod)
        
        # Test basic properties
        assert sod['content_type'].native == 'signed_data'
        
        # Get the security object
        security_object = sod.get_security_object()
        assert isinstance(security_object, LDSSecurityObject)
        
        # Get the signing time
        signing_time = sod.get_signing_time()
        if signing_time is not None:
            assert hasattr(signing_time, 'year')
            assert hasattr(signing_time, 'month')
            assert hasattr(signing_time, 'day')
        
        # Get the certificate
        certificate = sod.get_certificate()
        if certificate is not None:
            # Verify this is a valid certificate
            assert certificate['tbs_certificate']['subject'].native is not None
            assert certificate['tbs_certificate']['issuer'].native is not None
        
    except Exception as e:
        pytest.skip(f"SOD test skipped due to: {str(e)}. The SOD implementation may be incomplete.")

def test_signed_object():
    """Test the SignedObject class which is used to represent SODs in Marty."""
    from src.marty_common.models.passport import SignedObject
    import base64
    import time
    
    # Create a test signature (base64 encoded)
    signature_bytes = b"This is a test signature"
    signature_b64 = base64.b64encode(signature_bytes).decode('utf-8')
    timestamp = int(time.time())
    
    # Create a SignedObject
    sod = SignedObject(
        signature=signature_b64,
        timestamp=timestamp
    )
    
    # Test properties
    assert sod.signature == signature_b64
    assert sod.timestamp == timestamp
    assert sod.algorithm == "SHA256withRSA"  # Default value
    
    # Test methods
    sod_string = sod.to_string()
    assert sod_string == f"{signature_b64}.{timestamp}"
    
    # Test reconstruction from string
    sod_reconstructed = SignedObject.from_string(sod_string)
    assert sod_reconstructed.signature == signature_b64
    assert sod_reconstructed.timestamp == timestamp
    
    # Test dictionary conversion
    sod_dict = sod.to_dict()
    assert sod_dict["signature"] == signature_b64
    assert sod_dict["timestamp"] == timestamp
    assert sod_dict["algorithm"] == "SHA256withRSA"
    
    # Test reconstruction from dictionary
    sod_reconstructed2 = SignedObject.from_dict(sod_dict)
    assert sod_reconstructed2.signature == signature_b64
    assert sod_reconstructed2.timestamp == timestamp
    assert sod_reconstructed2.algorithm == "SHA256withRSA"