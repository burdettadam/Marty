# Wallet Demo - OID4VCI Flow Examples
# Base URL for the issuer API
@baseUrl = http://localhost:8000

### 1. Get OpenID Credential Issuer Metadata
GET {{baseUrl}}/.well-known/openid-credential-issuer
Content-Type: application/json

### 2. Create Credential Offer (Issuer Side)
POST {{baseUrl}}/credential-offer
Content-Type: application/json

{
    "subject_id": "did:example:alice123",
    "credential_type": "VerifiableCredential",
    "base_claims": {
        "given_name": "Alice",
        "family_name": "Wonderland",
        "email": "alice@example.com",
        "birthdate": "1990-01-01"
    },
    "selective_disclosures": {
        "address": {
            "street": "123 Main St",
            "city": "Wonderland",
            "country": "Exampleland"
        },
        "phone": "+1-555-0123"
    },
    "metadata": {
        "purpose": "demo_credential",
        "issuer_notes": "Demo issuance for wallet testing"
    }
}

### 3. Exchange Pre-Authorized Code for Access Token
# Use the pre_authorized_code from the response above
POST {{baseUrl}}/token
Content-Type: application/json

{
    "grant_type": "urn:ietf:params:oauth:grant-type:pre-authorized_code",
    "pre-authorized_code": "REPLACE_WITH_CODE_FROM_STEP_2",
    "wallet_attestation": {
        "wallet_id": "demo_wallet_v1.0",
        "attestation_type": "self_attested"
    }
}

### 4. Request Credential with Access Token
# Use the access_token from step 3
POST {{baseUrl}}/credential
Content-Type: application/json
Authorization: Bearer REPLACE_WITH_ACCESS_TOKEN_FROM_STEP_3

{
    "format": "sd-jwt",
    "disclose_claims": ["given_name", "family_name"],
    "audience": "did:example:verifier789",
    "nonce": "demo_nonce_12345",
    "wallet_attestation": {
        "wallet_id": "demo_wallet_v1.0",
        "attestation_type": "self_attested"
    }
}

### 5. Health Check
GET {{baseUrl}}/health

### Example Complete Flow (Copy values between requests)
# Step 1: Create offer
# Step 2: Copy pre_authorized_code to token request
# Step 3: Copy access_token to credential request
# Step 4: Receive SD-JWT credential

### Sample SD-JWT Response Structure
# {
#   "credential": "eyJhbGciOiJFUzI1NiIsInR5cCI6InNkLWp3dCIsImtpZCI6ImlwX2tleS0xIn0...",
#   "disclosures": [
#     "WyJhbGljZSIsICJnaXZlbl9uYW1lIiwgIkFsaWNlIl0",
#     "WyJib2IiLCAiZmFtaWx5X25hbWUiLCAiV29uZGVybGFuZCJd"
#   ],
#   "format": "sd-jwt",
#   "credential_id": "cred_12345",
#   "expires_in": 86400,
#   "sd_jwt_location": "sd-jwt/cred_12345.sdjwt",
#   "disclosures_location": "sd-jwt/cred_12345-disclosures.json",
#   "issuer": "https://issuer.example.com",
#   "credential_type": "VerifiableCredential",
#   "subject_id": "did:example:alice123"
# }

### Advanced Examples

### 6. Create Identity Document Credential
POST {{baseUrl}}/credential-offer
Content-Type: application/json

{
    "subject_id": "did:example:john456",
    "credential_type": "IdentityDocument",
    "base_claims": {
        "document_type": "passport",
        "document_number": "P123456789",
        "issuing_country": "US",
        "given_name": "John",
        "family_name": "Doe",
        "nationality": "US",
        "date_of_birth": "1985-03-15",
        "place_of_birth": "New York, NY",
        "sex": "M"
    },
    "selective_disclosures": {
        "biometric_template": "base64_encoded_template_data",
        "address": {
            "street": "456 Oak Avenue",
            "city": "Springfield",
            "state": "IL",
            "postal_code": "62701",
            "country": "US"
        },
        "travel_document_data": {
            "issuing_authority": "U.S. Department of State",
            "date_of_issue": "2023-01-15",
            "date_of_expiry": "2033-01-15"
        }
    },
    "metadata": {
        "document_class": "passport",
        "security_level": "high",
        "verification_method": "in_person"
    }
}

### 7. Create Age Verification Credential (Minimal Disclosure)
POST {{baseUrl}}/credential-offer
Content-Type: application/json

{
    "subject_id": "did:example:jane789",
    "credential_type": "AgeVerification",
    "base_claims": {
        "over_18": true,
        "over_21": true,
        "issuer": "https://age-verification.example.com"
    },
    "selective_disclosures": {
        "exact_age": 25,
        "birth_year": 1998,
        "birth_month": 7,
        "verification_date": "2024-01-15"
    },
    "metadata": {
        "purpose": "age_gate",
        "verification_level": "standard"
    }
}

### 8. Error Testing - Invalid Credential Type
POST {{baseUrl}}/credential-offer
Content-Type: application/json

{
    "subject_id": "did:example:test",
    "credential_type": "InvalidCredentialType",
    "base_claims": {},
    "selective_disclosures": {}
}

### 9. Error Testing - Invalid Pre-Authorized Code
POST {{baseUrl}}/token
Content-Type: application/json

{
    "grant_type": "urn:ietf:params:oauth:grant-type:pre-authorized_code",
    "pre-authorized_code": "invalid_code_12345"
}

### 10. Error Testing - Invalid Access Token
POST {{baseUrl}}/credential
Content-Type: application/json
Authorization: Bearer invalid_token_12345

{
    "format": "sd-jwt",
    "disclose_claims": ["given_name"]
}
